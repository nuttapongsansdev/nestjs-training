var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.59,1,2.354]],["body/controllers/AppController.html",[0,2.471,1,3.657,2,1.933,3,0.227,4,0.227,5,0.227,6,3.592,7,0.612,8,2.167,9,5.332,10,1.496,11,0.023,12,0.756,13,4.227,14,1.696,15,1.412,16,0.377,17,0.658,18,3.387,19,3.592,20,0.26,21,0.039,22,2.405,23,1.696,24,1.592,25,4.227,26,0.018,27,0.018]],["title/modules/AppModule.html",[28,0.755,29,2.354]],["body/modules/AppModule.html",[1,3.296,2,1.895,3,0.154,4,0.154,5,0.154,11,0.023,16,0.442,17,0.446,18,3.356,19,2.435,20,0.176,21,0.027,26,0.014,27,0.014,28,1.057,29,4.65,30,1.014,31,1.15,32,1.311,33,1.311,34,1.15,35,2.226,36,1.15,37,2.435,38,2.435,39,2.435,40,3.645,41,3.645,42,3.645,43,3.645,44,3.645,45,3.356,46,1.895,47,1.311,48,1.311,49,2.866,50,1.773,51,2.866,52,2.866,53,2.866,54,2.866,55,2.866,56,2.866,57,2.866]],["title/injectables/AppService.html",[18,1.978,58,0.709]],["body/injectables/AppService.html",[3,0.241,4,0.241,5,0.241,7,0.652,8,2.255,9,5.456,11,0.023,12,0.805,14,1.806,15,1.469,16,0.314,17,0.701,18,3.199,20,0.277,21,0.042,24,1.696,26,0.018,27,0.018,58,1.146,59,1.806,60,3.827,61,4.503,62,4.503]],["title/classes/AssignMembersTaskDTO.html",[21,0.032,63,2.149]],["body/classes/AssignMembersTaskDTO.html",[3,0.214,4,0.214,5,0.214,7,0.577,10,1.84,11,0.023,12,0.929,15,1.359,16,0.362,20,0.245,21,0.049,26,0.017,27,0.017,63,3.213,64,1.821,65,4.918,66,3.713,67,2.696,68,1.629,69,5.788,70,0.868,71,3.577,72,5.788,73,3.983,74,4.346,75,3.385,76,3.983,77,2.266]],["title/modules/AuthModule.html",[28,0.755,40,2.149]],["body/modules/AuthModule.html",[3,0.191,4,0.191,5,0.191,11,0.023,16,0.428,17,0.556,20,0.22,21,0.033,26,0.016,27,0.016,28,1.19,30,1.264,31,1.432,32,1.633,33,1.633,34,1.432,35,2.506,36,1.432,40,4.168,45,3.599,46,2.211,47,1.633,48,1.633,50,2.068,78,3.034,79,3.571,80,3.034,81,3.91,82,3.91,83,3.571,84,4.834,85,2.031,86,3.571,87,3.571,88,3.571]],["title/classes/CreateStatusDTO.html",[21,0.032,89,2.149]],["body/classes/CreateStatusDTO.html",[3,0.238,4,0.238,5,0.238,7,0.642,10,1.568,11,0.023,12,0.792,15,1.455,16,0.309,20,0.273,21,0.052,26,0.018,27,0.018,64,2.026,68,1.744,70,0.74,77,2.521,89,3.44,90,4.73,91,3.765,92,4.569,93,4.431,94,4.431,95,4.73,96,4.73]],["title/classes/CreateTaskDTO.html",[21,0.032,97,2.149]],["body/classes/CreateTaskDTO.html",[3,0.21,4,0.21,5,0.21,7,0.569,11,0.023,12,1.091,15,1.699,16,0.274,20,0.242,21,0.037,26,0.017,27,0.017,64,1.796,66,3.27,67,2.658,68,1.614,70,1.019,75,3.337,97,3.183,98,5.384,99,3.27,100,4.884,101,3.891,102,3.926,103,3.891,104,3.926,105,3.926,106,3.926,107,2.948]],["title/injectables/JwtAuthGuard.html",[58,0.709,108,2.149]],["body/injectables/JwtAuthGuard.html",[3,0.252,4,0.252,5,0.252,11,0.023,16,0.403,17,0.733,20,0.29,21,0.044,26,0.019,27,0.019,58,1.178,59,1.889,85,2.678,108,3.572,109,3.187,110,3.535,111,3.913,112,5.78,113,4.001]],["title/injectables/JwtStrategy.html",[58,0.709,81,2.149]],["body/injectables/JwtStrategy.html",[3,0.197,4,0.197,5,0.197,7,0.533,8,1.98,11,0.023,12,0.882,14,1.477,16,0.388,17,0.573,20,0.227,21,0.034,24,1.387,26,0.016,27,0.016,58,1.006,59,1.477,70,0.615,81,3.05,85,2.094,111,3.341,114,3.129,115,4.194,116,4.194,117,2.546,118,3.682,119,4.935,120,3.682,121,1.477,122,1.154,123,1.477,124,3.129,125,2.418,126,3.129,127,3.682,128,3.129,129,2.765,130,3.129,131,3.129,132,3.682,133,3.682,134,3.682,135,3.129,136,3.682,137,3.129,138,3.682]],["title/injectables/LocalAuthGuard.html",[58,0.709,139,2.354]],["body/injectables/LocalAuthGuard.html",[3,0.252,4,0.252,5,0.252,11,0.023,16,0.403,17,0.733,20,0.29,21,0.044,26,0.019,27,0.019,58,1.178,59,1.889,85,2.678,110,3.535,111,3.913,113,4.001,139,3.913,140,3.535,141,5.78]],["title/injectables/LocalStrategy.html",[58,0.709,82,2.149]],["body/injectables/LocalStrategy.html",[3,0.175,4,0.175,5,0.175,7,0.472,8,1.822,11,0.023,12,0.812,14,1.308,15,1.609,16,0.394,17,0.508,20,0.201,21,0.03,22,1.855,23,1.308,24,1.711,26,0.015,27,0.015,58,0.926,59,1.308,70,0.759,82,2.807,85,1.855,111,3.075,115,3.86,116,3.86,117,1.491,121,1.822,122,1.423,123,1.822,126,2.771,128,2.771,129,2.449,131,2.771,142,2.771,143,2.754,144,3.261,145,3.242,146,3.261,147,4.542,148,3.216,149,3.261,150,2.449,151,2.208,152,3.86,153,3.261,154,2.771,155,3.261,156,1.718,157,3.23,158,1.718,159,3.261,160,2.449]],["title/entities/LogEntity.html",[161,1.59,162,1.978]],["body/entities/LogEntity.html",[3,0.298,4,0.196,5,0.196,7,0.531,10,1.966,11,0.023,12,0.993,15,1.286,16,0.256,20,0.303,21,0.034,26,0.016,27,0.016,68,1.542,70,1.065,125,2.722,161,1.676,162,2.799,163,1.931,164,2.752,165,4.72,166,5.555,167,5.555,168,3.665,169,4.192,170,3.665,171,4.171,172,3.665,173,1.676,174,3.665,175,3.695,176,3.695,177,3.665]],["title/modules/LogModule.html",[28,0.755,178,2.149]],["body/modules/LogModule.html",[3,0.209,4,0.209,5,0.209,11,0.023,16,0.425,17,0.608,20,0.241,21,0.036,26,0.017,27,0.017,28,1.245,30,1.383,31,1.568,32,1.787,33,1.787,34,1.568,35,2.348,36,2.3,46,2.348,47,1.787,48,1.787,50,1.672,162,2.223,178,3.909,179,3.321,180,3.321,181,3.537,182,3.908,183,3.908,184,2.223,185,1.568,186,2.934,187,3.908,188,2.415]],["title/classes/LogService.html",[21,0.032,181,1.832]],["body/classes/LogService.html",[3,0.254,4,0.147,5,0.147,7,0.397,8,1.61,11,0.023,12,0.994,14,2.096,16,0.364,17,0.427,20,0.169,21,0.026,23,1.1,26,0.013,27,0.013,58,0.818,64,1.254,70,1.028,117,1.835,121,2.23,122,1.742,123,2.23,162,1.56,165,2.331,171,3.923,173,1.254,175,3.014,176,3.014,181,2.114,185,1.1,186,2.059,188,1.695,189,2.331,190,2.752,191,4.014,192,2.742,193,3.229,194,2.742,195,4.014,196,4.014,197,2.742,198,6.38,199,5.225,200,4.014,201,2.742,202,4.014,203,2.742,204,4.014,205,2.742,206,1.857,207,2.742,208,2.742,209,4.014,210,2.742,211,2.742,212,2.742,213,2.742,214,2.742]],["title/classes/MemberDTO.html",[21,0.032,71,2.149]],["body/classes/MemberDTO.html",[3,0.243,4,0.243,5,0.243,7,0.656,10,1.603,11,0.023,12,0.809,15,1.474,16,0.316,20,0.279,21,0.053,26,0.019,27,0.019,64,2.071,68,1.768,70,0.756,71,3.487,74,4.615,77,2.576,125,3.011,215,3.848,216,4.528]],["title/classes/MemberTask.html",[21,0.032,103,2.354]],["body/classes/MemberTask.html",[3,0.254,4,0.254,5,0.254,7,0.686,11,0.022,12,0.846,15,1.516,20,0.291,21,0.044,26,0.019,27,0.019,64,2.165,67,3.206,68,1.817,70,0.791,103,3.926,125,3.072,217,4.929,218,4.735]],["title/modules/MongodbConfigModule.html",[28,0.755,219,2.149]],["body/modules/MongodbConfigModule.html",[3,0.19,4,0.19,5,0.19,11,0.023,16,0.427,17,0.551,20,0.218,21,0.033,26,0.016,27,0.016,28,1.185,30,1.253,31,1.42,32,1.619,33,1.619,34,1.42,35,2.495,36,2.189,46,2.198,47,1.619,48,1.619,50,1.515,219,3.989,220,3.008,221,3.008,222,3.008,223,3.895,224,3.54,225,3.008,226,3.008,227,2.188,228,4.637,229,3.254,230,3.008,231,3.008,232,3.008,233,3.008,234,3.54,235,4.084,236,3.54]],["title/injectables/MongodbConfigService.html",[58,0.709,223,1.978]],["body/injectables/MongodbConfigService.html",[3,0.19,4,0.19,5,0.19,7,0.513,11,0.023,12,1.046,15,1.53,16,0.335,17,0.551,20,0.218,21,0.033,22,2.014,23,1.42,24,1.81,26,0.016,27,0.016,58,0.979,59,1.42,68,1.506,70,0.803,117,1.619,121,1.42,122,1.109,123,1.42,188,2.97,190,2.875,223,2.734,227,2.188,237,3.008,238,3.372,239,4.084,240,4.637,241,3.694,242,3.008,243,4.974,244,4.806,245,4.084,246,2.658,247,2.658,248,3.54,249,3.54,250,3.008,251,3.54,252,3.54,253,3.008]],["title/modules/MongodbProviderModule.html",[28,0.755,41,2.149]],["body/modules/MongodbProviderModule.html",[3,0.206,4,0.206,5,0.206,11,0.023,16,0.438,17,0.597,20,0.236,21,0.036,26,0.017,27,0.017,28,1.101,30,1.358,36,1.538,41,3.134,50,2.17,70,0.64,122,1.202,162,2.885,163,2.02,184,2.885,185,1.538,186,2.88,188,3.134,219,3.134,223,3.439,240,3.259,241,2.597,254,3.835,255,3.835,256,3.835,257,3.259,258,3.259,259,3.835,260,3.835,261,3.259,262,2.597,263,3.259]],["title/modules/PostgresConfigModule.html",[28,0.755,264,2.149]],["body/modules/PostgresConfigModule.html",[3,0.185,4,0.185,5,0.185,11,0.023,16,0.423,17,0.537,20,0.212,21,0.032,26,0.016,27,0.016,28,1.17,30,1.222,31,1.384,32,1.578,33,1.578,34,1.384,35,2.463,36,2.16,46,2.16,47,1.578,48,1.578,50,1.477,225,2.933,226,2.933,227,2.133,228,4.577,229,3.198,230,2.933,231,2.933,232,2.933,233,2.933,235,4.922,264,3.963,265,2.933,266,2.933,267,2.933,268,3.879,269,3.451,270,3.451,271,3.451,272,3.451,273,3.451,274,3.451,275,3.451]],["title/injectables/PostgresConfigService.html",[58,0.709,268,1.978]],["body/injectables/PostgresConfigService.html",[3,0.166,4,0.166,5,0.166,7,0.449,11,0.023,12,1.113,15,1.583,16,0.306,17,0.483,20,0.191,21,0.029,22,1.765,23,1.244,24,2.197,26,0.014,27,0.014,58,0.894,59,1.244,68,1.374,70,0.732,117,1.419,121,1.244,122,0.972,123,1.244,148,2.894,157,3.144,190,2.68,227,1.917,238,3.144,239,3.727,241,3.444,242,2.636,243,4.7,245,3.727,246,2.329,247,2.329,250,2.636,253,2.636,268,2.495,276,2.636,277,4.324,278,4.324,279,4.386,280,3.727,281,3.102,282,3.102,283,3.102,284,3.102,285,3.102,286,3.102,287,3.102,288,3.102,289,3.102,290,3.102,291,3.102,292,3.102,293,3.102,294,3.102]],["title/modules/PostgresProviderModule.html",[28,0.755,42,2.149]],["body/modules/PostgresProviderModule.html",[3,0.191,4,0.191,5,0.191,11,0.024,16,0.451,17,0.556,20,0.22,21,0.033,26,0.016,27,0.016,28,1.05,30,1.264,36,1.432,42,2.988,50,2.068,70,0.596,148,2.031,150,2.681,163,1.881,184,2.75,185,1.432,241,2.417,257,3.034,258,3.034,261,3.034,262,2.417,263,3.034,264,2.988,268,3.341,277,3.034,278,3.034,280,3.034,295,3.571,296,3.571,297,3.571,298,2.369,299,2.417,300,2.369,301,2.681,302,2.369,303,2.417,304,3.571,305,3.571,306,3.571,307,3.571,308,3.571]],["title/classes/RegisterDTO.html",[21,0.032,309,2.149]],["body/classes/RegisterDTO.html",[3,0.184,4,0.184,5,0.184,7,0.498,10,2.047,11,0.023,12,1.033,15,1.705,16,0.328,20,0.212,21,0.044,26,0.015,27,0.015,64,1.572,68,1.476,70,0.965,77,1.955,95,5.316,148,3.057,246,3.537,309,2.911,310,2.921,311,4.035,312,4.035,313,4.035,314,3.437,315,3.437,316,3.437,317,4.711,318,3.437,319,4.711,320,3.437,321,3.437,322,6.057,323,2.327,324,4.711,325,2.921]],["title/controllers/StatusController.html",[0,1.59,326,2.354]],["body/controllers/StatusController.html",[0,1.572,2,1.572,3,0.184,4,0.184,5,0.184,7,0.498,8,1.89,10,1.217,11,0.023,12,0.614,14,1.379,16,0.403,17,0.535,20,0.212,21,0.032,22,1.955,23,1.379,24,1.294,26,0.015,27,0.015,70,0.574,89,3.573,108,2.124,109,2.327,121,1.379,122,1.077,123,1.379,143,2.831,151,2.327,156,1.811,158,1.811,238,2.124,326,3.189,327,2.921,328,3.057,329,4.003,330,3.437,331,4.548,332,3.437,333,3.437,334,3.537,335,2.581,336,2.581,337,2.581,338,2.921,339,2.921,340,2.581,341,3.057,342,2.921,343,2.327,344,2.921,345,3.437,346,2.921,347,2.921,348,2.921,349,3.437,350,3.437]],["title/entities/StatusEntity.html",[161,1.59,298,1.704]],["body/entities/StatusEntity.html",[3,0.163,4,0.163,5,0.163,7,0.441,10,2.051,11,0.023,12,1.036,15,1.433,16,0.302,20,0.187,21,0.028,26,0.014,27,0.014,68,1.356,70,1.075,92,3.782,122,1.578,125,2.468,161,1.979,163,1.604,169,3.41,173,1.393,298,2.121,300,2.95,328,1.732,351,2.588,352,3.782,353,3.41,354,3.782,355,3.713,356,2.287,357,3.25,358,4.118,359,3.045,360,3.25,361,3.045,362,3.045,363,2.588,364,4.329,365,3.045,366,2.287,367,3.25,368,3.045,369,3.25,370,3.679,371,2.287,372,3.25,373,2.588]],["title/modules/StatusModule.html",[28,0.755,43,2.149]],["body/modules/StatusModule.html",[2,2.305,3,0.204,4,0.204,5,0.204,11,0.023,16,0.437,17,0.592,20,0.234,21,0.035,26,0.017,27,0.017,28,1.228,30,1.345,31,1.524,32,1.738,33,1.738,34,1.524,35,2.586,36,1.524,43,3.981,46,2.305,47,1.738,48,1.738,50,1.626,184,2.162,185,1.524,298,1.862,299,2.573,326,3.829,341,3.665,342,3.229,374,3.229,375,3.229,376,3.8,377,3.8,378,3.8]],["title/injectables/StatusService.html",[58,0.709,341,1.978]],["body/injectables/StatusService.html",[3,0.181,4,0.25,5,0.181,7,0.49,8,1.868,11,0.023,12,0.833,14,1.356,16,0.42,17,0.526,20,0.208,21,0.032,23,1.356,24,1.273,26,0.015,27,0.015,58,0.949,59,1.356,70,0.778,89,3.548,92,2.539,117,2.13,121,1.868,122,1.46,123,1.868,143,2.807,156,1.781,158,1.781,173,1.546,185,1.356,190,1.781,193,3.548,206,2.289,298,1.657,299,2.289,328,2.65,329,3.958,341,2.65,343,2.289,344,2.873,379,2.873,380,3.381,381,3.381,382,4.658,383,4.658,384,3.381,385,3.153,386,3.381,387,3.381,388,3.381]],["title/controllers/TaskController.html",[0,1.59,389,2.354]],["body/controllers/TaskController.html",[0,1.111,2,1.111,3,0.13,4,0.13,5,0.13,7,0.352,8,1.471,10,1.564,11,0.023,12,0.79,14,1.772,16,0.414,17,0.378,20,0.149,21,0.023,23,1.471,24,1.664,26,0.012,27,0.012,63,3.042,66,1.382,70,0.738,97,3.042,107,2.753,108,1.501,109,1.644,117,1.111,121,1.772,122,1.384,123,1.772,143,2.927,151,2.483,156,1.932,158,1.932,181,1.932,190,1.932,238,1.501,323,1.644,331,4.563,334,3.967,335,1.824,336,2.753,337,1.824,340,1.824,343,1.644,346,3.754,347,2.064,353,3.332,389,2.483,390,2.064,391,1.824,392,3.116,393,3.667,394,3.116,395,2.429,396,2.429,397,2.429,398,2.429,399,2.429,400,2.429,401,2.429,402,3.042,403,2.429,404,2.429,405,2.429,406,2.429,407,2.429,408,2.513,409,2.064,410,2.064,411,1.644,412,2.064,413,2.064,414,3.116,415,2.064,416,2.429,417,2.429,418,2.429,419,2.429,420,2.429,421,2.429,422,2.429,423,2.429,424,2.429,425,2.429,426,2.429,427,2.429]],["title/entities/TaskEntity.html",[161,1.59,300,1.704]],["body/entities/TaskEntity.html",[3,0.119,4,0.119,5,0.119,7,0.679,10,2.095,11,0.023,12,1.058,15,1.507,16,0.291,20,0.136,21,0.021,26,0.011,27,0.011,66,2.374,68,1.071,70,1.056,99,2.374,100,3.546,101,2.825,122,1.75,125,2.045,161,1.563,163,1.166,169,3.627,173,1.013,262,2.313,298,2.625,300,1.674,302,2.9,328,2.374,352,3.133,354,3.133,355,3.176,356,1.663,357,2.566,358,3.523,360,2.566,366,1.663,367,2.566,369,2.566,371,1.663,372,2.566,391,1.663,428,1.882,429,4.173,430,3.417,431,2.214,432,2.214,433,2.214,434,2.214,435,2.214,436,2.214,437,1.882,438,3.417,439,2.214,440,3.417,441,2.214,442,2.214,443,2.214,444,2.214,445,2.214,446,4.173,447,3.417,448,2.214,449,2.214,450,2.214,451,4.173,452,3.417,453,2.904,454,4.173,455,2.214,456,2.214,457,2.214,458,2.214,459,2.214,460,2.214]],["title/classes/TaskListFilterDTO.html",[21,0.032,402,2.149]],["body/classes/TaskListFilterDTO.html",[3,0.178,4,0.178,5,0.178,7,0.482,10,2.119,11,0.023,12,1.07,15,1.619,16,0.232,20,0.205,21,0.043,26,0.015,27,0.015,64,1.521,68,1.443,70,1,74,3.967,77,1.892,96,5.088,99,3.005,101,3.576,328,3.005,355,3.86,402,2.846,411,4.193,461,5.263,462,2.827,463,5.283,464,5.283,465,5.987,466,3.327,467,3.327,468,3.327,469,3.327,470,3.327]],["title/modules/TaskModule.html",[28,0.755,44,2.149]],["body/modules/TaskModule.html",[2,2.211,3,0.191,4,0.191,5,0.191,11,0.023,16,0.441,17,0.556,20,0.22,21,0.033,26,0.016,27,0.016,28,1.19,30,1.264,31,1.432,32,1.633,33,1.633,34,1.432,35,2.506,36,1.432,44,4.067,46,2.211,47,1.633,48,1.633,50,2.068,178,3.793,184,2.031,185,1.432,300,1.75,301,2.681,389,3.711,408,3.599,409,3.034,471,3.034,472,3.034,473,3.571,474,3.571,475,3.571,476,3.571,477,3.571]],["title/injectables/TaskService.html",[58,0.709,408,1.978]],["body/injectables/TaskService.html",[3,0.113,4,0.216,5,0.113,7,0.304,8,1.316,11,0.024,12,0.816,14,1.619,15,1.055,16,0.43,17,0.327,20,0.129,21,0.02,23,0.843,24,0.792,26,0.011,27,0.011,58,0.669,59,0.843,63,2.495,66,1.196,70,0.762,71,1.299,97,2.82,101,2.222,107,2.464,117,1.501,121,1.83,122,1.43,123,1.83,125,1.608,143,2.986,152,1.786,156,1.729,158,1.729,160,1.578,173,0.961,181,1.107,185,0.843,190,1.107,193,2.82,206,1.423,229,1.423,298,1.03,299,1.423,300,1.978,301,1.578,302,1.978,303,1.423,343,1.423,353,1.423,385,3.089,391,2.464,392,2.789,394,2.789,402,2.82,408,1.867,410,1.786,411,1.423,412,1.786,413,1.786,415,1.786,478,1.786,479,3.282,480,2.102,481,2.102,482,3.282,483,2.102,484,2.102,485,3.282,486,4.562,487,2.102,488,3.282,489,2.102,490,2.102,491,2.102,492,2.102,493,2.102,494,2.102,495,2.102,496,2.102,497,2.102,498,2.102,499,2.102,500,2.102,501,2.102,502,2.102,503,2.102,504,2.102,505,2.102,506,2.102,507,2.102,508,2.102,509,2.102,510,2.102,511,2.102,512,2.102,513,2.102,514,2.102,515,2.102,516,2.102,517,3.282,518,2.102,519,2.102,520,3.282,521,3.282,522,2.789,523,2.102,524,2.102,525,2.102]],["title/controllers/UserController.html",[0,1.59,526,2.354]],["body/controllers/UserController.html",[0,1.288,2,1.288,3,0.151,4,0.151,5,0.151,7,0.408,8,1.642,10,1.449,11,0.023,12,0.732,14,1.642,16,0.392,17,0.439,20,0.173,21,0.026,22,1.603,23,1.13,24,1.542,26,0.013,27,0.013,70,0.805,99,2.329,121,1.642,122,1.283,123,1.642,139,1.907,140,2.115,143,2.54,145,2.54,156,2.156,157,1.741,158,1.484,238,1.741,309,3.474,323,1.907,328,1.603,331,3.62,334,3.073,335,2.115,336,2.115,337,2.115,338,2.394,339,2.394,340,2.115,348,2.394,385,2.771,414,3.478,526,2.771,527,2.394,528,4.093,529,4.093,530,2.817,531,2.817,532,2.817,533,4.093,534,2.817,535,2.817,536,2.817,537,4.093,538,2.817,539,2.817,540,2.394,541,2.394,542,2.817,543,4.093,544,4.093,545,2.817,546,2.394,547,2.817,548,2.817,549,4.093,550,2.817,551,2.817,552,2.817,553,2.817,554,2.817,555,3.478,556,2.817]],["title/entities/UserEnity.html",[161,1.59,302,1.704]],["body/entities/UserEnity.html",[3,0.132,4,0.132,5,0.132,7,0.356,10,2.158,11,0.023,12,1.09,15,1.624,16,0.258,20,0.151,21,0.023,26,0.012,27,0.012,68,1.159,70,1.08,122,1.394,125,2.18,135,3.144,148,2.531,157,1.519,161,1.692,163,1.295,169,4.034,173,1.124,300,3.092,302,1.813,311,3.341,312,3.341,313,3.341,352,3.341,353,3.012,354,3.341,355,3.352,356,1.845,357,2.778,358,3.718,360,2.778,363,2.088,366,1.845,367,2.778,369,2.778,370,3.144,371,1.845,372,2.778,373,2.088,437,2.088,453,3.144,557,2.088,558,4.45,559,2.457,560,3.7,561,2.457,562,2.457,563,2.457,564,2.457,565,2.457,566,2.457,567,2.457,568,3.7,569,2.457,570,2.457,571,2.457]],["title/modules/UserModule.html",[28,0.755,45,1.978]],["body/modules/UserModule.html",[2,2.192,3,0.189,4,0.189,5,0.189,11,0.023,16,0.439,17,0.549,20,0.217,21,0.033,26,0.016,27,0.016,28,1.182,30,1.248,31,1.414,32,1.612,33,1.612,34,1.414,35,2.49,36,2.184,45,3.668,46,2.192,47,1.612,48,1.612,50,1.508,145,3.605,184,2.005,185,1.414,302,1.727,303,2.386,526,3.686,541,2.996,572,2.996,573,2.996,574,2.996,575,3.525,576,3.525,577,4.792,578,2.647,579,3.525]],["title/injectables/UserService.html",[58,0.709,145,1.832]],["body/injectables/UserService.html",[3,0.117,4,0.181,5,0.117,7,0.316,8,1.357,11,0.024,12,0.833,14,1.66,15,1.541,16,0.387,17,0.34,20,0.134,21,0.02,23,1.357,24,1.755,26,0.011,27,0.011,58,0.689,59,0.876,70,0.778,117,1.547,121,1.869,122,1.46,123,1.869,124,1.857,137,2.874,143,2.807,145,1.782,148,2.65,150,1.641,151,1.479,156,2.807,157,3.114,158,2.454,173,0.999,185,0.876,190,1.782,193,2.879,206,1.479,262,1.479,302,2.283,303,1.479,309,2.879,311,3.784,312,1.641,313,1.641,385,2.29,540,1.857,555,2.874,578,1.641,580,1.857,581,3.382,582,3.382,583,3.382,584,2.185,585,5.558,586,2.185,587,3.382,588,3.382,589,2.185,590,3.382,591,2.185,592,3.382,593,2.185,594,2.874,595,2.185,596,3.382,597,2.185,598,1.857,599,2.185,600,2.185,601,2.185,602,2.185,603,2.185,604,4.138,605,2.185,606,2.185,607,2.185,608,2.185,609,2.185,610,2.185,611,2.185,612,2.185,613,2.185,614,2.185,615,2.185]],["title/coverage.html",[616,3.566]],["body/coverage.html",[0,2.288,1,1.699,5,0.135,6,2.133,11,0.023,18,1.428,21,0.056,26,0.012,27,0.012,34,1.007,58,1.273,60,2.133,63,1.551,65,2.133,66,1.428,67,3.051,70,0.419,71,1.551,81,1.551,82,1.551,89,1.551,90,2.133,91,2.133,97,1.551,98,2.133,103,1.699,108,1.551,109,1.699,110,2.822,114,2.133,139,1.699,140,1.884,142,2.133,145,1.322,160,1.884,161,2.288,162,1.428,164,1.884,181,1.322,189,2.133,215,2.133,217,2.133,223,1.428,237,2.133,268,1.428,276,2.133,298,1.23,300,1.23,302,1.23,309,1.551,310,2.133,326,1.699,327,2.133,341,1.428,351,2.133,379,2.133,389,1.699,390,2.133,402,1.551,408,1.428,411,1.699,428,2.133,461,2.133,462,2.133,478,2.133,526,1.699,527,2.133,557,2.133,580,2.133,616,1.884,617,2.51,618,2.51,619,2.51,620,6.971,621,5.625,622,5.832,623,5.832,624,3.759,625,2.133,626,2.51,627,5.004,628,2.51,629,2.51,630,2.51]],["title/dependencies.html",[31,1.678,631,2.467]],["body/dependencies.html",[11,0.024,17,0.568,21,0.046,26,0.016,27,0.016,31,1.464,77,2.076,85,2.076,129,4.161,130,3.101,154,3.101,173,1.669,185,1.464,188,2.255,227,2.255,229,2.471,323,2.471,578,2.74,594,3.101,632,3.649,633,3.649,634,5.926,635,3.649,636,3.649,637,3.649,638,3.649,639,3.649,640,3.649,641,3.649,642,3.649,643,3.649,644,3.649,645,3.649,646,3.649,647,3.649,648,3.649,649,3.649,650,3.649,651,3.649,652,3.649,653,3.649,654,3.649,655,3.649,656,3.649,657,3.649,658,3.649,659,3.649,660,3.649,661,3.649,662,3.649]],["title/miscellaneous/enumerations.html",[663,1.965,664,3.555]],["body/miscellaneous/enumerations.html",[3,0.318,7,0.71,11,0.022,26,0.019,27,0.019,164,3.682,171,4.449,175,4.449,176,4.449,247,4.78,663,3.32,664,4.167,665,4.903]],["title/miscellaneous/functions.html",[663,1.965,666,3.555]],["body/miscellaneous/functions.html",[7,0.759,11,0.02,26,0.02,27,0.02,34,2.628,625,4.457,663,3.551,666,4.457,667,5.245]],["title/index.html",[7,0.42,668,2.903,669,2.903]],["body/index.html",[4,0.181,11,0.023,26,0.015,27,0.015,99,1.923,193,2.089,325,4.528,522,2.873,546,3.958,616,2.539,670,3.381,671,3.381,672,4.658,673,3.381,674,3.381,675,3.381,676,3.381,677,3.381,678,3.381,679,5.328,680,3.381,681,3.381,682,3.381,683,6.377,684,3.381,685,3.381,686,3.381,687,6.224,688,3.381,689,4.658,690,3.381,691,3.381,692,3.381,693,3.381,694,4.658,695,3.381,696,3.381,697,3.381,698,4.658,699,4.658,700,3.381,701,3.381,702,3.381,703,3.381,704,3.381,705,2.873,706,3.381,707,3.381,708,3.381,709,3.381,710,3.381,711,3.381,712,3.381,713,3.381,714,3.381,715,3.381,716,2.873,717,3.381,718,3.381,719,3.381,720,3.381,721,3.381,722,3.381,723,2.873]],["title/modules.html",[30,1.681]],["body/modules.html",[11,0.018,26,0.018,27,0.018,29,2.819,30,1.474,40,2.573,41,2.573,42,2.573,43,2.573,44,2.573,45,2.368,178,2.573,219,2.573,264,2.573,705,5.783,724,6.805,725,6.805,726,6.93,727,5.35,728,5.35]],["title/overview.html",[729,4.035]],["body/overview.html",[2,1.199,11,0.023,18,2.63,26,0.013,27,0.013,28,0.569,29,4.539,30,0.928,31,1.051,32,1.199,33,1.199,34,1.051,35,1.199,36,1.051,37,2.227,38,2.227,39,2.227,40,3.834,41,2.857,42,2.857,43,3.373,44,3.655,45,3.365,46,1.775,47,1.199,48,1.199,59,1.051,64,1.199,78,2.227,80,2.227,81,2.857,82,2.857,145,3.116,163,1.381,178,3.159,179,2.227,180,2.227,181,2.693,219,3.373,220,2.227,221,2.227,222,2.227,223,3.365,264,3.373,265,2.227,266,2.227,267,2.227,268,3.365,341,2.63,374,2.227,375,2.227,408,2.63,471,2.227,472,2.227,572,2.227,573,2.227,574,2.227,598,3.299,729,2.227,730,3.882,731,2.621]],["title/properties.html",[68,1.311,631,2.467]],["body/properties.html",[11,0.023,26,0.02,27,0.02,68,1.613,99,2.928,716,4.374,723,4.374,732,5.147,733,5.147,734,5.147]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"modules/AuthModule.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":733,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":598,"title":{},"body":{"injectables/UserService.html":{},"overview.html":{}}}],["10.0.0",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["17.1.1",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["17.11.0",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":615,"title":{},"body":{"injectables/UserService.html":{}}}],["3.1.1",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":730,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":537,"title":{},"body":{"controllers/UserController.html":{}}}],["5.1.1",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["5.9.1",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["7.1.15",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":731,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["8.11.3",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["accessors",{"_index":239,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{}}}],["accesstoken",{"_index":533,"title":{},"body":{"controllers/UserController.html":{}}}],["addselect(['m.id",{"_index":511,"title":{},"body":{"injectables/TaskService.html":{}}}],["addselect(['s.id",{"_index":507,"title":{},"body":{"injectables/TaskService.html":{}}}],["amazing",{"_index":706,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":414,"title":{},"body":{"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["apiheader",{"_index":542,"title":{},"body":{"controllers/UserController.html":{}}}],["apiokresponse",{"_index":543,"title":{},"body":{"controllers/UserController.html":{}}}],["apiokresponse({type",{"_index":535,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":322,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["apiproperty()@isnotempty",{"_index":319,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["apiproperty()@isnotempty()@isemail",{"_index":314,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["apiproperty({example",{"_index":316,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["apiresponse",{"_index":544,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":685,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":678,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asdasdad",{"_index":62,"title":{},"body":{"injectables/AppService.html":{}}}],["assignmemberstaskdto",{"_index":63,"title":{"classes/AssignMembersTaskDTO.html":{}},"body":{"classes/AssignMembersTaskDTO.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["assignmemberstotask",{"_index":392,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["assignmemberstotask(@body",{"_index":426,"title":{},"body":{"controllers/TaskController.html":{}}}],["assignmemberstotask(body",{"_index":395,"title":{},"body":{"controllers/TaskController.html":{}}}],["assignmemberstotask(source",{"_index":483,"title":{},"body":{"injectables/TaskService.html":{}}}],["async",{"_index":143,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/StatusController.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth.guard",{"_index":340,"title":{},"body":{"controllers/StatusController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":110,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth/auth.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":113,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":112,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":141,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":716,"title":{},"body":{"index.html":{},"properties.html":{}}}],["available",{"_index":728,"title":{},"body":{"modules.html":{}}}],["await",{"_index":158,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/StatusController.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":707,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":152,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{}}}],["bcrypt",{"_index":594,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":605,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(source.password",{"_index":597,"title":{},"body":{"injectables/UserService.html":{}}}],["body",{"_index":331,"title":{},"body":{"controllers/StatusController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":726,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":724,"title":{},"body":{"modules.html":{}}}],["building",{"_index":673,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/AssignMembersTaskDTO.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"classes/RegisterDTO.html":{},"classes/TaskListFilterDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"modules/AuthModule.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":64,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"classes/RegisterDTO.html":{},"classes/TaskListFilterDTO.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":179,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":180,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_mongodbconfigmodule",{"_index":220,"title":{},"body":{"modules/MongodbConfigModule.html":{},"overview.html":{}}}],["cluster_mongodbconfigmodule_exports",{"_index":222,"title":{},"body":{"modules/MongodbConfigModule.html":{},"overview.html":{}}}],["cluster_mongodbconfigmodule_providers",{"_index":221,"title":{},"body":{"modules/MongodbConfigModule.html":{},"overview.html":{}}}],["cluster_postgresconfigmodule",{"_index":265,"title":{},"body":{"modules/PostgresConfigModule.html":{},"overview.html":{}}}],["cluster_postgresconfigmodule_exports",{"_index":267,"title":{},"body":{"modules/PostgresConfigModule.html":{},"overview.html":{}}}],["cluster_postgresconfigmodule_providers",{"_index":266,"title":{},"body":{"modules/PostgresConfigModule.html":{},"overview.html":{}}}],["cluster_statusmodule",{"_index":374,"title":{},"body":{"modules/StatusModule.html":{},"overview.html":{}}}],["cluster_statusmodule_providers",{"_index":375,"title":{},"body":{"modules/StatusModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":471,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_imports",{"_index":473,"title":{},"body":{"modules/TaskModule.html":{}}}],["cluster_taskmodule_providers",{"_index":472,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":572,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":573,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":574,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":169,"title":{},"body":{"entities/LogEntity.html":{},"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["column({name",{"_index":445,"title":{},"body":{"entities/TaskEntity.html":{}}}],["column({select",{"_index":566,"title":{},"body":{"entities/UserEnity.html":{}}}],["config",{"_index":245,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{}}}],["config.service",{"_index":225,"title":{},"body":{"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{}}}],["configmodule",{"_index":226,"title":{},"body":{"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{}}}],["configmodule.forroot",{"_index":230,"title":{},"body":{"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{}}}],["configservice",{"_index":243,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{}}}],["configuration",{"_index":228,"title":{},"body":{"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{}}}],["console.log(...othor",{"_index":208,"title":{},"body":{"classes/LogService.html":{}}}],["console.log(req.user",{"_index":554,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":156,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/StatusController.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":117,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogService.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["constructor(config",{"_index":242,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{}}}],["constructor(logrepo",{"_index":192,"title":{},"body":{"classes/LogService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"controllers/StatusController.html":{},"controllers/UserController.html":{}}}],["constructor(statusrepo",{"_index":380,"title":{},"body":{"injectables/StatusService.html":{}}}],["constructor(taskrepo",{"_index":480,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(userrepo",{"_index":584,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":144,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/StatusController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/StatusController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('status",{"_index":345,"title":{},"body":{"controllers/StatusController.html":{}}}],["controller('task",{"_index":416,"title":{},"body":{"controllers/TaskController.html":{}}}],["controller('user",{"_index":545,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/StatusController.html":{},"modules/StatusModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":616,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":393,"title":{},"body":{"controllers/TaskController.html":{}}}],["create(@body",{"_index":418,"title":{},"body":{"controllers/TaskController.html":{}}}],["create(body",{"_index":398,"title":{},"body":{"controllers/TaskController.html":{}}}],["created_by",{"_index":459,"title":{},"body":{"entities/TaskEntity.html":{}}}],["created_by'})@index",{"_index":432,"title":{},"body":{"entities/TaskEntity.html":{}}}],["created_on",{"_index":357,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["createdatecolumn",{"_index":369,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["createdatecolumn({name",{"_index":356,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["createdby",{"_index":429,"title":{},"body":{"entities/TaskEntity.html":{}}}],["createdon",{"_index":352,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["createdtasks",{"_index":558,"title":{},"body":{"entities/UserEnity.html":{}}}],["createquerybuilder('task",{"_index":504,"title":{},"body":{"injectables/TaskService.html":{}}}],["createstatus",{"_index":329,"title":{},"body":{"controllers/StatusController.html":{},"injectables/StatusService.html":{}}}],["createstatus(@request",{"_index":349,"title":{},"body":{"controllers/StatusController.html":{}}}],["createstatus(req",{"_index":330,"title":{},"body":{"controllers/StatusController.html":{}}}],["createstatus(source",{"_index":383,"title":{},"body":{"injectables/StatusService.html":{}}}],["createstatusdto",{"_index":89,"title":{"classes/CreateStatusDTO.html":{}},"body":{"classes/CreateStatusDTO.html":{},"controllers/StatusController.html":{},"injectables/StatusService.html":{},"coverage.html":{}}}],["createtask",{"_index":479,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtask(source",{"_index":485,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtaskdto",{"_index":97,"title":{"classes/CreateTaskDTO.html":{}},"body":{"classes/CreateTaskDTO.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["createuser",{"_index":581,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(source",{"_index":588,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":241,"title":{},"body":{"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{}}}],["date",{"_index":355,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"entities/UserEnity.html":{}}}],["dateend",{"_index":463,"title":{},"body":{"classes/TaskListFilterDTO.html":{}}}],["datestart",{"_index":464,"title":{},"body":{"classes/TaskListFilterDTO.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/AssignMembersTaskDTO.html":{},"classes/CreateStatusDTO.html":{},"entities/LogEntity.html":{},"classes/MemberDTO.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{}}}],["default",{"_index":246,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"classes/RegisterDTO.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":407,"title":{},"body":{"controllers/TaskController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":517,"title":{},"body":{"injectables/TaskService.html":{}}}],["description",{"_index":99,"title":{},"body":{"classes/CreateTaskDTO.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":686,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["dto/assign",{"_index":413,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["dto/create",{"_index":343,"title":{},"body":{"controllers/StatusController.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["dto/member.dto",{"_index":492,"title":{},"body":{"injectables/TaskService.html":{}}}],["dto/register.dto",{"_index":540,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/task",{"_index":410,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["e2e",{"_index":695,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":674,"title":{},"body":{"index.html":{}}}],["email",{"_index":311,"title":{},"body":{"classes/RegisterDTO.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{}}}],["entities",{"_index":163,"title":{},"body":{"entities/LogEntity.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresProviderModule.html":{},"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{},"overview.html":{}}}],["entity",{"_index":161,"title":{"entities/LogEntity.html":{},"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}},"body":{"entities/LogEntity.html":{},"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{},"coverage.html":{}}}],["entity('log",{"_index":177,"title":{},"body":{"entities/LogEntity.html":{}}}],["enum",{"_index":174,"title":{},"body":{"entities/LogEntity.html":{}}}],["enumerations",{"_index":664,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":176,"title":{},"body":{"entities/LogEntity.html":{},"classes/LogService.html":{},"miscellaneous/enumerations.html":{}}}],["error(...othor",{"_index":196,"title":{},"body":{"classes/LogService.html":{}}}],["example",{"_index":325,"title":{},"body":{"classes/RegisterDTO.html":{},"index.html":{}}}],["expiresin",{"_index":614,"title":{},"body":{"injectables/UserService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"modules/AuthModule.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"modules/PostgresProviderModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":111,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":127,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":133,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":135,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/UserEnity.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"modules/AuthModule.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filter",{"_index":490,"title":{},"body":{"injectables/TaskService.html":{}}}],["filter.dateend",{"_index":523,"title":{},"body":{"injectables/TaskService.html":{}}}],["filter.datestart",{"_index":520,"title":{},"body":{"injectables/TaskService.html":{}}}],["filter.description",{"_index":519,"title":{},"body":{"injectables/TaskService.html":{}}}],["filter.dto",{"_index":412,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["filter.dto.ts",{"_index":462,"title":{},"body":{"classes/TaskListFilterDTO.html":{},"coverage.html":{}}}],["filter.dto.ts:11",{"_index":469,"title":{},"body":{"classes/TaskListFilterDTO.html":{}}}],["filter.dto.ts:14",{"_index":467,"title":{},"body":{"classes/TaskListFilterDTO.html":{}}}],["filter.dto.ts:17",{"_index":466,"title":{},"body":{"classes/TaskListFilterDTO.html":{}}}],["filter.dto.ts:5",{"_index":470,"title":{},"body":{"classes/TaskListFilterDTO.html":{}}}],["filter.dto.ts:8",{"_index":468,"title":{},"body":{"classes/TaskListFilterDTO.html":{}}}],["filter.title",{"_index":518,"title":{},"body":{"injectables/TaskService.html":{}}}],["firstname",{"_index":312,"title":{},"body":{"classes/RegisterDTO.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":672,"title":{},"body":{"index.html":{}}}],["func",{"_index":491,"title":{},"body":{"injectables/TaskService.html":{}}}],["function",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":666,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatetokenuser",{"_index":582,"title":{},"body":{"injectables/UserService.html":{}}}],["generatetokenuser(user",{"_index":590,"title":{},"body":{"injectables/UserService.html":{}}}],["getdatabase",{"_index":250,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethost",{"_index":281,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["getmany",{"_index":514,"title":{},"body":{"injectables/TaskService.html":{}}}],["getpassword",{"_index":287,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["getport",{"_index":283,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["getting",{"_index":668,"title":{"index.html":{}},"body":{}}],["geturl",{"_index":248,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["getuser",{"_index":285,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["graph",{"_index":727,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":702,"title":{},"body":{"index.html":{}}}],["hapi/joi",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["hash",{"_index":596,"title":{},"body":{"injectables/UserService.html":{}}}],["here",{"_index":713,"title":{},"body":{"index.html":{}}}],["host",{"_index":277,"title":{},"body":{"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{}}}],["https://nestjs.com",{"_index":720,"title":{},"body":{"index.html":{}}}],["id",{"_index":125,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/LogEntity.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"injectables/TaskService.html":{},"entities/UserEnity.html":{}}}],["identifier",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":134,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"modules/AuthModule.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"modules/PostgresProviderModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"modules/AuthModule.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["info(...othor",{"_index":200,"title":{},"body":{"classes/LogService.html":{}}}],["inject",{"_index":263,"title":{},"body":{"modules/MongodbProviderModule.html":{},"modules/PostgresProviderModule.html":{}}}],["injectable",{"_index":58,"title":{"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"injectables/StatusService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogService.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"injectables/StatusService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"injectables/StatusService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":206,"title":{},"body":{"classes/LogService.html":{},"injectables/StatusService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["injectrepository(logentity",{"_index":207,"title":{},"body":{"classes/LogService.html":{}}}],["injectrepository(statusentity",{"_index":386,"title":{},"body":{"injectables/StatusService.html":{}}}],["injectrepository(taskentity",{"_index":493,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectrepository(userenity",{"_index":595,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":682,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":684,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":72,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{}}}],["isdate",{"_index":465,"title":{},"body":{"classes/TaskListFilterDTO.html":{}}}],["isemail",{"_index":324,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["isnotempty",{"_index":95,"title":{},"body":{"classes/CreateStatusDTO.html":{},"classes/RegisterDTO.html":{}}}],["isnotempty()@isstring",{"_index":93,"title":{},"body":{"classes/CreateStatusDTO.html":{}}}],["ispasswordtrue",{"_index":604,"title":{},"body":{"injectables/UserService.html":{}}}],["isstring",{"_index":96,"title":{},"body":{"classes/CreateStatusDTO.html":{},"classes/TaskListFilterDTO.html":{}}}],["isuuid",{"_index":74,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{},"classes/MemberDTO.html":{},"classes/TaskListFilterDTO.html":{}}}],["joi",{"_index":229,"title":{},"body":{"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/TaskService.html":{},"dependencies.html":{}}}],["joi.number",{"_index":272,"title":{},"body":{"modules/PostgresConfigModule.html":{}}}],["joi.object",{"_index":233,"title":{},"body":{"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{}}}],["joi.string",{"_index":235,"title":{},"body":{"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{}}}],["join",{"_index":709,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":451,"title":{},"body":{"entities/TaskEntity.html":{}}}],["jointable",{"_index":452,"title":{},"body":{"entities/TaskEntity.html":{}}}],["json.stringify",{"_index":210,"title":{},"body":{"classes/LogService.html":{}}}],["jwt",{"_index":130,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt/jwt.strategy",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":108,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/StatusController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":132,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":577,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtservice",{"_index":585,"title":{},"body":{"injectables/UserService.html":{}}}],["jwtstrategy",{"_index":81,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":717,"title":{},"body":{"index.html":{}}}],["label",{"_index":92,"title":{},"body":{"classes/CreateStatusDTO.html":{},"entities/StatusEntity.html":{},"injectables/StatusService.html":{}}}],["lastname",{"_index":313,"title":{},"body":{"classes/RegisterDTO.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{}}}],["leftjoin('task.members",{"_index":509,"title":{},"body":{"injectables/TaskService.html":{}}}],["leftjoin('task.status",{"_index":505,"title":{},"body":{"injectables/TaskService.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":723,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":699,"title":{},"body":{"index.html":{}}}],["list",{"_index":411,"title":{},"body":{"controllers/TaskController.html":{},"classes/TaskListFilterDTO.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["load",{"_index":231,"title":{},"body":{"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{}}}],["local",{"_index":154,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local/local.strategy",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":139,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["localstrategy",{"_index":82,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log.service",{"_index":183,"title":{},"body":{"modules/LogModule.html":{}}}],["logentity",{"_index":162,"title":{"entities/LogEntity.html":{}},"body":{"entities/LogEntity.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"modules/MongodbProviderModule.html":{},"coverage.html":{}}}],["logger",{"_index":417,"title":{},"body":{"controllers/TaskController.html":{}}}],["login",{"_index":528,"title":{},"body":{"controllers/UserController.html":{}}}],["login(@request",{"_index":553,"title":{},"body":{"controllers/UserController.html":{}}}],["login(req",{"_index":530,"title":{},"body":{"controllers/UserController.html":{}}}],["logmodule",{"_index":178,"title":{"modules/LogModule.html":{}},"body":{"modules/LogModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["logrepo",{"_index":195,"title":{},"body":{"classes/LogService.html":{}}}],["logservice",{"_index":181,"title":{"classes/LogService.html":{}},"body":{"modules/LogModule.html":{},"classes/LogService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["logtype",{"_index":171,"title":{},"body":{"entities/LogEntity.html":{},"classes/LogService.html":{},"miscellaneous/enumerations.html":{}}}],["m",{"_index":510,"title":{},"body":{"injectables/TaskService.html":{}}}],["m.firstname",{"_index":512,"title":{},"body":{"injectables/TaskService.html":{}}}],["m.id",{"_index":524,"title":{},"body":{"injectables/TaskService.html":{}}}],["m.lastname",{"_index":513,"title":{},"body":{"injectables/TaskService.html":{}}}],["manytomany",{"_index":453,"title":{},"body":{"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["manytomany(undefined",{"_index":437,"title":{},"body":{"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["manytoone",{"_index":454,"title":{},"body":{"entities/TaskEntity.html":{}}}],["manytoone(undefined",{"_index":430,"title":{},"body":{"entities/TaskEntity.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"modules/AuthModule.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["member",{"_index":106,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["member.dto",{"_index":76,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{}}}],["memberdto",{"_index":71,"title":{"classes/MemberDTO.html":{}},"body":{"classes/AssignMembersTaskDTO.html":{},"classes/MemberDTO.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["members",{"_index":66,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{},"classes/CreateTaskDTO.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["membertask",{"_index":103,"title":{"classes/MemberTask.html":{}},"body":{"classes/CreateTaskDTO.html":{},"classes/MemberTask.html":{},"coverage.html":{}}}],["message",{"_index":165,"title":{},"body":{"entities/LogEntity.html":{},"classes/LogService.html":{}}}],["metadata",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogService.html":{},"controllers/StatusController.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":663,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":698,"title":{},"body":{"index.html":{}}}],["mode",{"_index":689,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"modules/PostgresProviderModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"modules/PostgresProviderModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["module/status/status.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["module/task/task.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["module/user/user.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"modules/PostgresProviderModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":188,"title":{},"body":{"modules/LogModule.html":{},"classes/LogService.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"dependencies.html":{}}}],["mongodb_database",{"_index":236,"title":{},"body":{"modules/MongodbConfigModule.html":{}}}],["mongodb_url",{"_index":234,"title":{},"body":{"modules/MongodbConfigModule.html":{}}}],["mongodbconfigmodule",{"_index":219,"title":{"modules/MongodbConfigModule.html":{}},"body":{"modules/MongodbConfigModule.html":{},"modules/MongodbProviderModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodbconfigservice",{"_index":223,"title":{"injectables/MongodbConfigService.html":{}},"body":{"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"coverage.html":{},"overview.html":{}}}],["mongodbconfigservice.database",{"_index":260,"title":{},"body":{"modules/MongodbProviderModule.html":{}}}],["mongodbconfigservice.url",{"_index":259,"title":{},"body":{"modules/MongodbProviderModule.html":{}}}],["mongodbprovidermodule",{"_index":41,"title":{"modules/MongodbProviderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MongodbProviderModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["more",{"_index":712,"title":{},"body":{"index.html":{}}}],["msg",{"_index":209,"title":{},"body":{"classes/LogService.html":{}}}],["myśliwiec",{"_index":718,"title":{},"body":{"index.html":{}}}],["name",{"_index":122,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogService.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"injectables/PostgresConfigService.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":679,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":722,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"controllers/StatusController.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":227,"title":{},"body":{"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":578,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":323,"title":{},"body":{"classes/RegisterDTO.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":185,"title":{},"body":{"modules/LogModule.html":{},"classes/LogService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresProviderModule.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":160,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["newtask",{"_index":494,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtask.createdby",{"_index":501,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtask.description",{"_index":497,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtask.statusid",{"_index":499,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtask.title",{"_index":495,"title":{},"body":{"injectables/TaskService.html":{}}}],["node.js",{"_index":671,"title":{},"body":{"index.html":{}}}],["npm",{"_index":683,"title":{},"body":{"index.html":{}}}],["null",{"_index":607,"title":{},"body":{"injectables/UserService.html":{}}}],["nullable",{"_index":447,"title":{},"body":{"entities/TaskEntity.html":{}}}],["number",{"_index":291,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["nuttapong",{"_index":317,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["objectid",{"_index":166,"title":{},"body":{"entities/LogEntity.html":{}}}],["objectidcolumn",{"_index":167,"title":{},"body":{"entities/LogEntity.html":{}}}],["onetomany",{"_index":370,"title":{},"body":{"entities/StatusEntity.html":{},"entities/UserEnity.html":{}}}],["onetomany(undefined",{"_index":363,"title":{},"body":{"entities/StatusEntity.html":{},"entities/UserEnity.html":{}}}],["open",{"_index":700,"title":{},"body":{"index.html":{}}}],["optional",{"_index":123,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogService.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"controllers/StatusController.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["othor",{"_index":198,"title":{},"body":{"classes/LogService.html":{}}}],["out",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":729,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":631,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":406,"title":{},"body":{"controllers/TaskController.html":{}}}],["parameters",{"_index":121,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogService.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"controllers/StatusController.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["passport",{"_index":129,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":126,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":115,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":148,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{}}}],["patch",{"_index":405,"title":{},"body":{"controllers/TaskController.html":{}}}],["payload",{"_index":124,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["payload.sub",{"_index":138,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":710,"title":{},"body":{"index.html":{}}}],["port",{"_index":278,"title":{},"body":{"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{}}}],["post",{"_index":335,"title":{},"body":{"controllers/StatusController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["post('/assign_members",{"_index":425,"title":{},"body":{"controllers/TaskController.html":{}}}],["post('/create",{"_index":347,"title":{},"body":{"controllers/StatusController.html":{},"controllers/TaskController.html":{}}}],["post('/list",{"_index":421,"title":{},"body":{"controllers/TaskController.html":{}}}],["post('/login",{"_index":552,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/register",{"_index":547,"title":{},"body":{"controllers/UserController.html":{}}}],["postgres",{"_index":280,"title":{},"body":{"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{}}}],["postgres_database",{"_index":275,"title":{},"body":{"modules/PostgresConfigModule.html":{}}}],["postgres_host",{"_index":270,"title":{},"body":{"modules/PostgresConfigModule.html":{}}}],["postgres_password",{"_index":274,"title":{},"body":{"modules/PostgresConfigModule.html":{}}}],["postgres_port",{"_index":271,"title":{},"body":{"modules/PostgresConfigModule.html":{}}}],["postgres_user",{"_index":273,"title":{},"body":{"modules/PostgresConfigModule.html":{}}}],["postgresconfigmodule",{"_index":264,"title":{"modules/PostgresConfigModule.html":{}},"body":{"modules/PostgresConfigModule.html":{},"modules/PostgresProviderModule.html":{},"modules.html":{},"overview.html":{}}}],["postgresconfigservice",{"_index":268,"title":{"injectables/PostgresConfigService.html":{}},"body":{"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"coverage.html":{},"overview.html":{}}}],["postgresconfigservice.database",{"_index":308,"title":{},"body":{"modules/PostgresProviderModule.html":{}}}],["postgresconfigservice.host",{"_index":304,"title":{},"body":{"modules/PostgresProviderModule.html":{}}}],["postgresconfigservice.password",{"_index":307,"title":{},"body":{"modules/PostgresProviderModule.html":{}}}],["postgresconfigservice.port",{"_index":305,"title":{},"body":{"modules/PostgresProviderModule.html":{}}}],["postgresconfigservice.user",{"_index":306,"title":{},"body":{"modules/PostgresProviderModule.html":{}}}],["postgresprovidermodule",{"_index":42,"title":{"modules/PostgresProviderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostgresProviderModule.html":{},"modules.html":{},"overview.html":{}}}],["prefix",{"_index":238,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"controllers/StatusController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":371,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":360,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["private",{"_index":190,"title":{},"body":{"classes/LogService.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":691,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":670,"title":{},"body":{"index.html":{}}}],["project",{"_index":701,"title":{},"body":{"index.html":{}}}],["promise",{"_index":385,"title":{},"body":{"injectables/StatusService.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":68,"title":{"properties.html":{}},"body":{"classes/AssignMembersTaskDTO.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"entities/LogEntity.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"classes/RegisterDTO.html":{},"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"entities/UserEnity.html":{},"properties.html":{}}}],["provider/database/mongodb/provider.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["provider/database/postgres/provider.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["read",{"_index":711,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"classes/LogService.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"controllers/StatusController.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":529,"title":{},"body":{"controllers/UserController.html":{}}}],["register(@body",{"_index":548,"title":{},"body":{"controllers/UserController.html":{}}}],["register(body",{"_index":534,"title":{},"body":{"controllers/UserController.html":{}}}],["registerdto",{"_index":309,"title":{"classes/RegisterDTO.html":{}},"body":{"classes/RegisterDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["registerdto})@apiresponse({status",{"_index":536,"title":{},"body":{"controllers/UserController.html":{}}}],["repository",{"_index":193,"title":{},"body":{"classes/LogService.html":{},"injectables/StatusService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":334,"title":{},"body":{"controllers/StatusController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["req.user.id",{"_index":420,"title":{},"body":{"controllers/TaskController.html":{}}}],["request",{"_index":336,"title":{},"body":{"controllers/StatusController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["res",{"_index":549,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"modules/AuthModule.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"controllers/StatusController.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogService.html":{},"controllers/StatusController.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":687,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":506,"title":{},"body":{"injectables/TaskService.html":{}}}],["s.label",{"_index":508,"title":{},"body":{"injectables/TaskService.html":{}}}],["savelog",{"_index":191,"title":{},"body":{"classes/LogService.html":{}}}],["savelog(type",{"_index":202,"title":{},"body":{"classes/LogService.html":{}}}],["scalable",{"_index":675,"title":{},"body":{"index.html":{}}}],["secret",{"_index":137,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["secretorkey",{"_index":136,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":571,"title":{},"body":{"entities/UserEnity.html":{}}}],["server",{"_index":676,"title":{},"body":{"index.html":{}}}],["side",{"_index":677,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"modules/AuthModule.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"modules/LogModule.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"modules/MongodbConfigModule.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresConfigModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["source.description",{"_index":498,"title":{},"body":{"injectables/TaskService.html":{}}}],["source.email",{"_index":602,"title":{},"body":{"injectables/UserService.html":{}}}],["source.firstname",{"_index":600,"title":{},"body":{"injectables/UserService.html":{}}}],["source.label",{"_index":388,"title":{},"body":{"injectables/StatusService.html":{}}}],["source.lastname",{"_index":601,"title":{},"body":{"injectables/UserService.html":{}}}],["source.statusid",{"_index":500,"title":{},"body":{"injectables/TaskService.html":{}}}],["source.title",{"_index":496,"title":{},"body":{"injectables/TaskService.html":{}}}],["sponsors",{"_index":704,"title":{},"body":{"index.html":{}}}],["src/.../log.entity.ts",{"_index":665,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":667,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":61,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.module.ts",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/jwt/jwt",{"_index":109,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/StatusController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["src/auth/jwt/jwt.strategy.ts",{"_index":114,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt/jwt.strategy.ts:15",{"_index":120,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt/jwt.strategy.ts:6",{"_index":118,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local/local",{"_index":140,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/local/local.strategy.ts",{"_index":142,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local/local.strategy.ts:11",{"_index":146,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local/local.strategy.ts:16",{"_index":149,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/config/database/mongodb/config.module",{"_index":255,"title":{},"body":{"modules/MongodbProviderModule.html":{}}}],["src/config/database/mongodb/config.module.ts",{"_index":224,"title":{},"body":{"modules/MongodbConfigModule.html":{}}}],["src/config/database/mongodb/config.service",{"_index":256,"title":{},"body":{"modules/MongodbProviderModule.html":{}}}],["src/config/database/mongodb/config.service.ts",{"_index":237,"title":{},"body":{"injectables/MongodbConfigService.html":{},"coverage.html":{}}}],["src/config/database/mongodb/config.service.ts:10",{"_index":249,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["src/config/database/mongodb/config.service.ts:14",{"_index":251,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["src/config/database/mongodb/config.service.ts:6",{"_index":244,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["src/config/database/postgres/config.module",{"_index":296,"title":{},"body":{"modules/PostgresProviderModule.html":{}}}],["src/config/database/postgres/config.module.ts",{"_index":269,"title":{},"body":{"modules/PostgresConfigModule.html":{}}}],["src/config/database/postgres/config.service",{"_index":297,"title":{},"body":{"modules/PostgresProviderModule.html":{}}}],["src/config/database/postgres/config.service.ts",{"_index":276,"title":{},"body":{"injectables/PostgresConfigService.html":{},"coverage.html":{}}}],["src/config/database/postgres/config.service.ts:10",{"_index":282,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["src/config/database/postgres/config.service.ts:14",{"_index":284,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["src/config/database/postgres/config.service.ts:18",{"_index":286,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["src/config/database/postgres/config.service.ts:22",{"_index":288,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["src/config/database/postgres/config.service.ts:26",{"_index":289,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["src/config/database/postgres/config.service.ts:6",{"_index":279,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["src/log/log.module",{"_index":476,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/log/log.module.ts",{"_index":182,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service",{"_index":415,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["src/log/log.service.ts",{"_index":189,"title":{},"body":{"classes/LogService.html":{},"coverage.html":{}}}],["src/log/log.service.ts:13",{"_index":203,"title":{},"body":{"classes/LogService.html":{}}}],["src/log/log.service.ts:20",{"_index":201,"title":{},"body":{"classes/LogService.html":{}}}],["src/log/log.service.ts:24",{"_index":205,"title":{},"body":{"classes/LogService.html":{}}}],["src/log/log.service.ts:28",{"_index":197,"title":{},"body":{"classes/LogService.html":{}}}],["src/log/log.service.ts:7",{"_index":194,"title":{},"body":{"classes/LogService.html":{}}}],["src/main.ts",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/model/mongodb/log.entity",{"_index":186,"title":{},"body":{"modules/LogModule.html":{},"classes/LogService.html":{},"modules/MongodbProviderModule.html":{}}}],["src/model/mongodb/log.entity.ts",{"_index":164,"title":{},"body":{"entities/LogEntity.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/model/mongodb/log.entity.ts:12",{"_index":168,"title":{},"body":{"entities/LogEntity.html":{}}}],["src/model/mongodb/log.entity.ts:15",{"_index":170,"title":{},"body":{"entities/LogEntity.html":{}}}],["src/model/mongodb/log.entity.ts:18",{"_index":172,"title":{},"body":{"entities/LogEntity.html":{}}}],["src/model/postgres/status.entity",{"_index":299,"title":{},"body":{"modules/PostgresProviderModule.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"injectables/TaskService.html":{}}}],["src/model/postgres/status.entity.ts",{"_index":351,"title":{},"body":{"entities/StatusEntity.html":{},"coverage.html":{}}}],["src/model/postgres/status.entity.ts:14",{"_index":361,"title":{},"body":{"entities/StatusEntity.html":{}}}],["src/model/postgres/status.entity.ts:17",{"_index":362,"title":{},"body":{"entities/StatusEntity.html":{}}}],["src/model/postgres/status.entity.ts:20",{"_index":365,"title":{},"body":{"entities/StatusEntity.html":{}}}],["src/model/postgres/status.entity.ts:23",{"_index":359,"title":{},"body":{"entities/StatusEntity.html":{}}}],["src/model/postgres/status.entity.ts:26",{"_index":368,"title":{},"body":{"entities/StatusEntity.html":{}}}],["src/model/postgres/task.entity",{"_index":301,"title":{},"body":{"modules/PostgresProviderModule.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["src/model/postgres/task.entity.ts",{"_index":428,"title":{},"body":{"entities/TaskEntity.html":{},"coverage.html":{}}}],["src/model/postgres/task.entity.ts:19",{"_index":436,"title":{},"body":{"entities/TaskEntity.html":{}}}],["src/model/postgres/task.entity.ts:22",{"_index":449,"title":{},"body":{"entities/TaskEntity.html":{}}}],["src/model/postgres/task.entity.ts:25",{"_index":435,"title":{},"body":{"entities/TaskEntity.html":{}}}],["src/model/postgres/task.entity.ts:28",{"_index":448,"title":{},"body":{"entities/TaskEntity.html":{}}}],["src/model/postgres/task.entity.ts:33",{"_index":444,"title":{},"body":{"entities/TaskEntity.html":{}}}],["src/model/postgres/task.entity.ts:38",{"_index":433,"title":{},"body":{"entities/TaskEntity.html":{}}}],["src/model/postgres/task.entity.ts:42",{"_index":441,"title":{},"body":{"entities/TaskEntity.html":{}}}],["src/model/postgres/task.entity.ts:45",{"_index":434,"title":{},"body":{"entities/TaskEntity.html":{}}}],["src/model/postgres/task.entity.ts:48",{"_index":450,"title":{},"body":{"entities/TaskEntity.html":{}}}],["src/model/postgres/user.entity",{"_index":303,"title":{},"body":{"modules/PostgresProviderModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/model/postgres/user.entity.ts",{"_index":557,"title":{},"body":{"entities/UserEnity.html":{},"coverage.html":{}}}],["src/model/postgres/user.entity.ts:15",{"_index":564,"title":{},"body":{"entities/UserEnity.html":{}}}],["src/model/postgres/user.entity.ts:18",{"_index":563,"title":{},"body":{"entities/UserEnity.html":{}}}],["src/model/postgres/user.entity.ts:21",{"_index":565,"title":{},"body":{"entities/UserEnity.html":{}}}],["src/model/postgres/user.entity.ts:24",{"_index":562,"title":{},"body":{"entities/UserEnity.html":{}}}],["src/model/postgres/user.entity.ts:27",{"_index":567,"title":{},"body":{"entities/UserEnity.html":{}}}],["src/model/postgres/user.entity.ts:30",{"_index":569,"title":{},"body":{"entities/UserEnity.html":{}}}],["src/model/postgres/user.entity.ts:33",{"_index":561,"title":{},"body":{"entities/UserEnity.html":{}}}],["src/model/postgres/user.entity.ts:36",{"_index":559,"title":{},"body":{"entities/UserEnity.html":{}}}],["src/model/postgres/user.entity.ts:39",{"_index":570,"title":{},"body":{"entities/UserEnity.html":{}}}],["src/module/status/dto/create",{"_index":90,"title":{},"body":{"classes/CreateStatusDTO.html":{},"coverage.html":{}}}],["src/module/status/status.controller.ts",{"_index":327,"title":{},"body":{"controllers/StatusController.html":{},"coverage.html":{}}}],["src/module/status/status.controller.ts:21",{"_index":333,"title":{},"body":{"controllers/StatusController.html":{}}}],["src/module/status/status.module.ts",{"_index":376,"title":{},"body":{"modules/StatusModule.html":{}}}],["src/module/status/status.service.ts",{"_index":379,"title":{},"body":{"injectables/StatusService.html":{},"coverage.html":{}}}],["src/module/status/status.service.ts:14",{"_index":384,"title":{},"body":{"injectables/StatusService.html":{}}}],["src/module/status/status.service.ts:8",{"_index":381,"title":{},"body":{"injectables/StatusService.html":{}}}],["src/module/task/dto/assign",{"_index":65,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{},"coverage.html":{}}}],["src/module/task/dto/create",{"_index":98,"title":{},"body":{"classes/CreateTaskDTO.html":{},"coverage.html":{}}}],["src/module/task/dto/member",{"_index":217,"title":{},"body":{"classes/MemberTask.html":{},"coverage.html":{}}}],["src/module/task/dto/member.dto.ts",{"_index":215,"title":{},"body":{"classes/MemberDTO.html":{},"coverage.html":{}}}],["src/module/task/dto/member.dto.ts:5",{"_index":216,"title":{},"body":{"classes/MemberDTO.html":{}}}],["src/module/task/dto/task",{"_index":461,"title":{},"body":{"classes/TaskListFilterDTO.html":{},"coverage.html":{}}}],["src/module/task/task.controller.ts",{"_index":390,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/module/task/task.controller.ts:30",{"_index":400,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/module/task/task.controller.ts:36",{"_index":404,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/module/task/task.controller.ts:44",{"_index":397,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/module/task/task.module.ts",{"_index":474,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/module/task/task.service.ts",{"_index":478,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/module/task/task.service.ts:15",{"_index":481,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/task/task.service.ts:21",{"_index":487,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/task/task.service.ts:35",{"_index":489,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/task/task.service.ts:65",{"_index":484,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/user/dto/register.dto.ts",{"_index":310,"title":{},"body":{"classes/RegisterDTO.html":{},"coverage.html":{}}}],["src/module/user/dto/register.dto.ts:11",{"_index":320,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["src/module/user/dto/register.dto.ts:16",{"_index":315,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["src/module/user/dto/register.dto.ts:20",{"_index":321,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["src/module/user/dto/register.dto.ts:7",{"_index":318,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["src/module/user/user.controller.ts",{"_index":527,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/module/user/user.controller.ts:33",{"_index":539,"title":{},"body":{"controllers/UserController.html":{}}}],["src/module/user/user.controller.ts:40",{"_index":532,"title":{},"body":{"controllers/UserController.html":{}}}],["src/module/user/user.module",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/module/user/user.module.ts",{"_index":575,"title":{},"body":{"modules/UserModule.html":{}}}],["src/module/user/user.service",{"_index":155,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/module/user/user.service.ts",{"_index":580,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/module/user/user.service.ts:10",{"_index":586,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:17",{"_index":589,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:30",{"_index":593,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:42",{"_index":591,"title":{},"body":{"injectables/UserService.html":{}}}],["src/provider/database/mongodb/provider.module.ts",{"_index":254,"title":{},"body":{"modules/MongodbProviderModule.html":{}}}],["src/provider/database/postgres/provider.module.ts",{"_index":295,"title":{},"body":{"modules/PostgresProviderModule.html":{}}}],["start",{"_index":522,"title":{},"body":{"injectables/TaskService.html":{},"index.html":{}}}],["start:dev",{"_index":690,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":692,"title":{},"body":{"index.html":{}}}],["started",{"_index":669,"title":{"index.html":{}},"body":{}}],["starter",{"_index":681,"title":{},"body":{"index.html":{}}}],["statements",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":328,"title":{},"body":{"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"injectables/StatusService.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"controllers/UserController.html":{}}}],["status.controller",{"_index":377,"title":{},"body":{"modules/StatusModule.html":{}}}],["status.dto",{"_index":344,"title":{},"body":{"controllers/StatusController.html":{},"injectables/StatusService.html":{}}}],["status.dto.ts",{"_index":91,"title":{},"body":{"classes/CreateStatusDTO.html":{},"coverage.html":{}}}],["status.dto.ts:6",{"_index":94,"title":{},"body":{"classes/CreateStatusDTO.html":{}}}],["status.entity",{"_index":455,"title":{},"body":{"entities/TaskEntity.html":{}}}],["status.service",{"_index":342,"title":{},"body":{"controllers/StatusController.html":{},"modules/StatusModule.html":{}}}],["status_id",{"_index":446,"title":{},"body":{"entities/TaskEntity.html":{}}}],["status_id'})@index",{"_index":443,"title":{},"body":{"entities/TaskEntity.html":{}}}],["statuscontroller",{"_index":326,"title":{"controllers/StatusController.html":{}},"body":{"controllers/StatusController.html":{},"modules/StatusModule.html":{},"coverage.html":{}}}],["statusentity",{"_index":298,"title":{"entities/StatusEntity.html":{}},"body":{"modules/PostgresProviderModule.html":{},"entities/StatusEntity.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"entities/TaskEntity.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["statusentity.tasks",{"_index":457,"title":{},"body":{"entities/TaskEntity.html":{}}}],["statusentity.tasks)@joincolumn({name",{"_index":442,"title":{},"body":{"entities/TaskEntity.html":{}}}],["statusid",{"_index":100,"title":{},"body":{"classes/CreateTaskDTO.html":{},"entities/TaskEntity.html":{}}}],["statusmodule",{"_index":43,"title":{"modules/StatusModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StatusModule.html":{},"modules.html":{},"overview.html":{}}}],["statusrepo",{"_index":382,"title":{},"body":{"injectables/StatusService.html":{}}}],["statusservice",{"_index":341,"title":{"injectables/StatusService.html":{}},"body":{"controllers/StatusController.html":{},"modules/StatusModule.html":{},"injectables/StatusService.html":{},"coverage.html":{},"overview.html":{}}}],["stay",{"_index":714,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":128,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AssignMembersTaskDTO.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"classes/RegisterDTO.html":{},"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"injectables/TaskService.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{}}}],["sub",{"_index":608,"title":{},"body":{"injectables/UserService.html":{}}}],["super",{"_index":131,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":705,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":725,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":261,"title":{},"body":{"modules/MongodbProviderModule.html":{},"modules/PostgresProviderModule.html":{}}}],["table",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":391,"title":{},"body":{"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"injectables/TaskService.html":{}}}],["task.controller",{"_index":475,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.description",{"_index":516,"title":{},"body":{"injectables/TaskService.html":{}}}],["task.dto",{"_index":107,"title":{},"body":{"classes/CreateTaskDTO.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["task.dto.ts",{"_index":67,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/MemberTask.html":{},"coverage.html":{}}}],["task.dto.ts:2",{"_index":218,"title":{},"body":{"classes/MemberTask.html":{}}}],["task.dto.ts:4",{"_index":105,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["task.dto.ts:5",{"_index":102,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["task.dto.ts:6",{"_index":75,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{},"classes/CreateTaskDTO.html":{}}}],["task.dto.ts:7",{"_index":104,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["task.dto.ts:9",{"_index":73,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{}}}],["task.entity",{"_index":373,"title":{},"body":{"entities/StatusEntity.html":{},"entities/UserEnity.html":{}}}],["task.service",{"_index":409,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task_user",{"_index":440,"title":{},"body":{"entities/TaskEntity.html":{}}}],["taskcontroller",{"_index":389,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskentity",{"_index":300,"title":{"entities/TaskEntity.html":{}},"body":{"modules/PostgresProviderModule.html":{},"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"entities/UserEnity.html":{},"coverage.html":{}}}],["taskentity.createdby",{"_index":560,"title":{},"body":{"entities/UserEnity.html":{}}}],["taskentity.members",{"_index":568,"title":{},"body":{"entities/UserEnity.html":{}}}],["taskentity.status",{"_index":364,"title":{},"body":{"entities/StatusEntity.html":{}}}],["taskid",{"_index":69,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{}}}],["tasklist",{"_index":394,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["tasklist(@request",{"_index":422,"title":{},"body":{"controllers/TaskController.html":{}}}],["tasklist(filter",{"_index":488,"title":{},"body":{"injectables/TaskService.html":{}}}],["tasklist(req",{"_index":401,"title":{},"body":{"controllers/TaskController.html":{}}}],["tasklistfilterdto",{"_index":402,"title":{"classes/TaskListFilterDTO.html":{}},"body":{"controllers/TaskController.html":{},"classes/TaskListFilterDTO.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskmodule",{"_index":44,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskrepo",{"_index":482,"title":{},"body":{"injectables/TaskService.html":{}}}],["tasks",{"_index":353,"title":{},"body":{"entities/StatusEntity.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/UserEnity.html":{}}}],["tasks.andwhere(`date_trunc('day',task.created_on",{"_index":521,"title":{},"body":{"injectables/TaskService.html":{}}}],["tasks.where(`task.title",{"_index":515,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskservice",{"_index":408,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":546,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["test'})@post('/register')@usepipes(validationpipe",{"_index":538,"title":{},"body":{"controllers/UserController.html":{}}}],["test:covsupport",{"_index":697,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":696,"title":{},"body":{"index.html":{}}}],["tests",{"_index":694,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":703,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.config.get(`${this.prefix}.database",{"_index":253,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{}}}],["this.config.get(`${this.prefix}.host",{"_index":290,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["this.config.get(`${this.prefix}.password",{"_index":294,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["this.config.get(`${this.prefix}.port",{"_index":292,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["this.config.get(`${this.prefix}.url",{"_index":252,"title":{},"body":{"injectables/MongodbConfigService.html":{}}}],["this.config.get(`${this.prefix}.user",{"_index":293,"title":{},"body":{"injectables/PostgresConfigService.html":{}}}],["this.jwtservice.sign(payload",{"_index":613,"title":{},"body":{"injectables/UserService.html":{}}}],["this.logger.info(body",{"_index":423,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.logrepo.save",{"_index":211,"title":{},"body":{"classes/LogService.html":{}}}],["this.savelog(logtype.error",{"_index":214,"title":{},"body":{"classes/LogService.html":{}}}],["this.savelog(logtype.info",{"_index":212,"title":{},"body":{"classes/LogService.html":{}}}],["this.savelog(logtype.warning",{"_index":213,"title":{},"body":{"classes/LogService.html":{}}}],["this.statusrepo.save",{"_index":387,"title":{},"body":{"injectables/StatusService.html":{}}}],["this.statusservice.createstatus(body",{"_index":350,"title":{},"body":{"controllers/StatusController.html":{}}}],["this.taskrepo",{"_index":503,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepo.save(newtask",{"_index":502,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepo.save(task",{"_index":525,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.assignmemberstotask(body",{"_index":427,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.createtask(body",{"_index":419,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.tasklist(body",{"_index":424,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.userrepo.findone",{"_index":603,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.save",{"_index":599,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(body",{"_index":550,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.generatetokenuser(req.user",{"_index":556,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.validateuser(username",{"_index":159,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["timestamp",{"_index":358,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["title",{"_index":101,"title":{},"body":{"classes/CreateTaskDTO.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"injectables/TaskService.html":{}}}],["token",{"_index":555,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["touch",{"_index":715,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":262,"title":{},"body":{"modules/MongodbProviderModule.html":{},"modules/PostgresProviderModule.html":{},"entities/TaskEntity.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":721,"title":{},"body":{"index.html":{}}}],["type",{"_index":70,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{},"classes/CreateStatusDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/LogEntity.html":{},"classes/LogService.html":{},"classes/MemberDTO.html":{},"classes/MemberTask.html":{},"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{},"injectables/PostgresConfigService.html":{},"modules/PostgresProviderModule.html":{},"classes/RegisterDTO.html":{},"controllers/StatusController.html":{},"entities/StatusEntity.html":{},"injectables/StatusService.html":{},"controllers/TaskController.html":{},"entities/TaskEntity.html":{},"classes/TaskListFilterDTO.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["typeorm",{"_index":173,"title":{},"body":{"entities/LogEntity.html":{},"classes/LogService.html":{},"entities/StatusEntity.html":{},"injectables/StatusService.html":{},"entities/TaskEntity.html":{},"injectables/TaskService.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":184,"title":{},"body":{"modules/LogModule.html":{},"modules/MongodbProviderModule.html":{},"modules/PostgresProviderModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([logentity",{"_index":187,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([statusentity",{"_index":378,"title":{},"body":{"modules/StatusModule.html":{}}}],["typeormmodule.forfeature([taskentity]),logmodule",{"_index":477,"title":{},"body":{"modules/TaskModule.html":{}}}],["typeormmodule.forfeature([userenity",{"_index":579,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":257,"title":{},"body":{"modules/MongodbProviderModule.html":{},"modules/PostgresProviderModule.html":{}}}],["types",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":680,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":153,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unit",{"_index":693,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":151,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/StatusController.html":{},"controllers/TaskController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":734,"title":{},"body":{"properties.html":{}}}],["updated_on",{"_index":367,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["updatedatecolumn",{"_index":372,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["updatedatecolumn({name",{"_index":366,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["updatedon",{"_index":354,"title":{},"body":{"entities/StatusEntity.html":{},"entities/TaskEntity.html":{},"entities/UserEnity.html":{}}}],["url",{"_index":240,"title":{},"body":{"injectables/MongodbConfigService.html":{},"modules/MongodbProviderModule.html":{}}}],["usefactory",{"_index":258,"title":{},"body":{"modules/MongodbProviderModule.html":{},"modules/PostgresProviderModule.html":{}}}],["useguards",{"_index":337,"title":{},"body":{"controllers/StatusController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":346,"title":{},"body":{"controllers/StatusController.html":{},"controllers/TaskController.html":{}}}],["useguards(jwtauthguard)@post('/assign_members",{"_index":396,"title":{},"body":{"controllers/TaskController.html":{}}}],["useguards(jwtauthguard)@post('/create",{"_index":399,"title":{},"body":{"controllers/TaskController.html":{}}}],["useguards(jwtauthguard)@post('/create')@usepipes(validationpipe",{"_index":332,"title":{},"body":{"controllers/StatusController.html":{}}}],["useguards(jwtauthguard)@post('/list",{"_index":403,"title":{},"body":{"controllers/TaskController.html":{}}}],["useguards(localauthguard",{"_index":551,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(localauthguard)@post('/login",{"_index":531,"title":{},"body":{"controllers/UserController.html":{}}}],["usepipes",{"_index":338,"title":{},"body":{"controllers/StatusController.html":{},"controllers/UserController.html":{}}}],["usepipes(validationpipe",{"_index":348,"title":{},"body":{"controllers/StatusController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":157,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/PostgresConfigService.html":{},"controllers/UserController.html":{},"entities/UserEnity.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":576,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":610,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":456,"title":{},"body":{"entities/TaskEntity.html":{}}}],["user.firstname",{"_index":611,"title":{},"body":{"injectables/UserService.html":{}}}],["user.id",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["user.lastname",{"_index":612,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":606,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":541,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["usercontroller",{"_index":526,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userenity",{"_index":302,"title":{"entities/UserEnity.html":{}},"body":{"modules/PostgresProviderModule.html":{},"entities/TaskEntity.html":{},"injectables/TaskService.html":{},"entities/UserEnity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userenity.createdtasks",{"_index":458,"title":{},"body":{"entities/TaskEntity.html":{}}}],["userenity.createdtasks)@joincolumn({name",{"_index":431,"title":{},"body":{"entities/TaskEntity.html":{}}}],["userentity",{"_index":438,"title":{},"body":{"entities/TaskEntity.html":{}}}],["userentity.tasks",{"_index":460,"title":{},"body":{"entities/TaskEntity.html":{}}}],["userentity.tasks)@jointable({name",{"_index":439,"title":{},"body":{"entities/TaskEntity.html":{}}}],["userid",{"_index":486,"title":{},"body":{"injectables/TaskService.html":{}}}],["usermodule",{"_index":45,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":150,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/PostgresProviderModule.html":{},"injectables/UserService.html":{}}}],["userrepo",{"_index":587,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":145,"title":{"injectables/UserService.html":{}},"body":{"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":116,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":119,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":147,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":583,"title":{},"body":{"injectables/UserService.html":{}}}],["validateuser(email",{"_index":592,"title":{},"body":{"injectables/UserService.html":{}}}],["validationpipe",{"_index":339,"title":{},"body":{"controllers/StatusController.html":{},"controllers/UserController.html":{}}}],["validationschema",{"_index":232,"title":{},"body":{"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{}}}],["validator",{"_index":77,"title":{},"body":{"classes/AssignMembersTaskDTO.html":{},"classes/CreateStatusDTO.html":{},"classes/MemberDTO.html":{},"classes/RegisterDTO.html":{},"classes/TaskListFilterDTO.html":{},"dependencies.html":{}}}],["value",{"_index":247,"title":{},"body":{"injectables/MongodbConfigService.html":{},"injectables/PostgresConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["version",{"_index":732,"title":{},"body":{"properties.html":{}}}],["void",{"_index":199,"title":{},"body":{"classes/LogService.html":{}}}],["warning",{"_index":175,"title":{},"body":{"entities/LogEntity.html":{},"classes/LogService.html":{},"miscellaneous/enumerations.html":{}}}],["warning(...othor",{"_index":204,"title":{},"body":{"classes/LogService.html":{}}}],["watch",{"_index":688,"title":{},"body":{"index.html":{}}}],["website",{"_index":719,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":708,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LogModule.html":{},"modules/MongodbConfigModule.html":{},"modules/PostgresConfigModule.html":{},"modules/StatusModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMongodbProviderModule\n\nMongodbProviderModule\n\nAppModule -->\n\nMongodbProviderModule->AppModule\n\n\n\n\n\nPostgresProviderModule\n\nPostgresProviderModule\n\nAppModule -->\n\nPostgresProviderModule->AppModule\n\n\n\n\n\nStatusModule\n\nStatusModule\n\nAppModule -->\n\nStatusModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MongodbProviderModule\n                        \n                        \n                            PostgresProviderModule\n                        \n                        \n                            StatusModule\n                        \n                        \n                            TaskModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PostgresProviderModule } from './provider/database/postgres/provider.module';\nimport { UserModule } from './module/user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { StatusModule } from './module/status/status.module';\nimport { TaskModule } from './module/task/task.module';\nimport { MongodbProviderModule } from './provider/database/mongodb/provider.module';\n\n@Module({\n  imports: [\n    PostgresProviderModule,\n    MongodbProviderModule,\n    UserModule,\n    AuthModule,\n    StatusModule,\n    TaskModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'asdasdad';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AssignMembersTaskDTO.html":{"url":"classes/AssignMembersTaskDTO.html","title":"class - AssignMembersTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AssignMembersTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/assign-members-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                members\n                            \n                            \n                                    \n                                taskId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MemberDTO[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/assign-members-task.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        taskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/assign-members-task.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MemberDTO } from './member.dto';\nimport { IsArray, IsUUID } from 'class-validator';\n\nexport class AssignMembersTaskDTO {\n  @IsUUID()\n  taskId: string;\n\n  @IsArray()\n  members: MemberDTO[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from 'src/module/user/user.module';\nimport { LocalStrategy } from './local/local.strategy';\nimport { JwtStrategy } from './jwt/jwt.strategy';\n\n@Module({\n  imports: [PassportModule, UserModule],\n  providers: [LocalStrategy, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateStatusDTO.html":{"url":"classes/CreateStatusDTO.html","title":"class - CreateStatusDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateStatusDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/status/dto/create-status.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/status/dto/create-status.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateStatusDTO {\n  @IsNotEmpty()\n  @IsString()\n  label: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDTO.html":{"url":"classes/CreateTaskDTO.html","title":"class - CreateTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/create-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                members\n                            \n                            \n                                statusId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/create-task.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MemberTask[]\n\n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/create-task.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/create-task.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/create-task.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MemberTask } from './member-task.dto';\n\nexport class CreateTaskDTO {\n  title: string;\n  description: string;\n  members: MemberTask[];\n  statusId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: 'SECRET',\n    });\n  }\n\n  validate(payload: any) {\n    return { id: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local/local.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/local/local.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { UserService } from 'src/module/user/user.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly userService: UserService) {\n    super();\n  }\n\n  async validate(username: string, password: string) {\n    const user = await this.userService.validateUser(username, password);\n\n    if (!user) {\n      return new BadRequestException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LogEntity.html":{"url":"entities/LogEntity.html","title":"entity - LogEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LogEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/mongodb/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ObjectIdColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/mongodb/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/mongodb/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/mongodb/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ObjectId, ObjectIdColumn } from 'typeorm';\n\nexport enum LogType {\n  INFO = 'INFO',\n  WARNING = 'WARNING',\n  ERROR = 'ERROR',\n}\n\n@Entity('log')\nexport class LogEntity {\n  @ObjectIdColumn()\n  id: ObjectId;\n\n  @Column()\n  message: string;\n\n  @Column()\n  type: LogType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\n\nLogService \n\nLogService \n\n\n\nLogModule\n\nLogModule\n\nLogService  -->\n\nLogModule->LogService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            LogService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LogService } from './log.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LogEntity } from 'src/model/mongodb/log.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([LogEntity], 'mongodb')],\n  providers: [LogService],\n  exports: [LogService],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogService.html":{"url":"classes/LogService.html","title":"class - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                info\n                            \n                            \n                                    Private\n                                saveLog\n                            \n                            \n                                warning\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(...othor: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/log/log.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                othor\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        info\n                        \n                    \n                \n            \n            \n                \ninfo(...othor: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/log/log.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                othor\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveLog(type: LogType, ...othor: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/log/log.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            LogType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                othor\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warning\n                        \n                    \n                \n            \n            \n                \nwarning(...othor: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/log/log.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                othor\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { LogEntity, LogType } from 'src/model/mongodb/log.entity';\nimport { Repository } from 'typeorm';\n\nInjectable();\nexport class LogService {\n  constructor(\n    @InjectRepository(LogEntity, 'mongodb')\n    private readonly logRepo: Repository,\n  ) {}\n\n  private saveLog(type: LogType, ...othor: any) {\n    console.log(...othor);\n    let msg = JSON.stringify({ ...othor });\n\n    this.logRepo.save({ message: msg, type: type });\n  }\n\n  info(...othor: any) {\n    this.saveLog(LogType.INFO, ...othor);\n  }\n\n  warning(...othor: any) {\n    this.saveLog(LogType.WARNING, ...othor);\n  }\n\n  error(...othor: any) {\n    this.saveLog(LogType.ERROR, ...othor);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemberDTO.html":{"url":"classes/MemberDTO.html","title":"class - MemberDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemberDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/member.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsUUID } from 'class-validator';\n\nexport class MemberDTO {\n  @IsUUID()\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemberTask.html":{"url":"classes/MemberTask.html","title":"class - MemberTask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemberTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/member-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/member-task.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class MemberTask {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MongodbConfigModule.html":{"url":"modules/MongodbConfigModule.html","title":"module - MongodbConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    MongodbConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MongodbConfigModule\n\n\n\ncluster_MongodbConfigModule_providers\n\n\n\ncluster_MongodbConfigModule_exports\n\n\n\n\nMongodbConfigService \n\nMongodbConfigService \n\n\n\nMongodbConfigModule\n\nMongodbConfigModule\n\nMongodbConfigService  -->\n\nMongodbConfigModule->MongodbConfigService \n\n\n\n\n\nMongodbConfigService\n\nMongodbConfigService\n\nMongodbConfigModule -->\n\nMongodbConfigService->MongodbConfigModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/database/mongodb/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MongodbConfigService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MongodbConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongodbConfigService } from './config.service';\nimport { ConfigModule } from '@nestjs/config';\nimport configuration from './configuration';\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n      validationSchema: Joi.object({\n        MONGODB_URL: Joi.string(),\n        MONGODB_DATABASE: Joi.string(),\n      }),\n    }),\n  ],\n  providers: [MongodbConfigService],\n  exports: [MongodbConfigService],\n})\nexport class MongodbConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongodbConfigService.html":{"url":"injectables/MongodbConfigService.html","title":"injectable - MongodbConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongodbConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/database/mongodb/config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                prefix\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    url\n                                \n                                \n                                    database\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/config/database/mongodb/config.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'mongodb'\n                    \n                \n                    \n                        \n                                Defined in src/config/database/mongodb/config.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in src/config/database/mongodb/config.service.ts:10\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        database\n                    \n                \n\n                \n                    \n                        getdatabase()\n                    \n                \n                            \n                                \n                                    Defined in src/config/database/mongodb/config.service.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class MongodbConfigService {\n  private prefix: string = 'mongodb';\n\n  constructor(private readonly config: ConfigService) {}\n\n  get url(): string {\n    return this.config.get(`${this.prefix}.url`);\n  }\n\n  get database(): string {\n    return this.config.get(`${this.prefix}.database`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MongodbProviderModule.html":{"url":"modules/MongodbProviderModule.html","title":"module - MongodbProviderModule","body":"\n                   \n\n\n\n\n    Modules\n    MongodbProviderModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/provider/database/mongodb/provider.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MongodbConfigModule } from 'src/config/database/mongodb/config.module';\nimport { MongodbConfigService } from 'src/config/database/mongodb/config.service';\nimport { LogEntity } from 'src/model/mongodb/log.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      name: 'mongodb',\n      imports: [MongodbConfigModule],\n      useFactory: (mongodbConfigService: MongodbConfigService) => ({\n        type: 'mongodb',\n        url: mongodbConfigService.url,\n        database: mongodbConfigService.database,\n        synchronize: true,\n        entities: [LogEntity],\n      }),\n      inject: [MongodbConfigService],\n    }),\n  ],\n  exports: [TypeOrmModule],\n})\nexport class MongodbProviderModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostgresConfigModule.html":{"url":"modules/PostgresConfigModule.html","title":"module - PostgresConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    PostgresConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostgresConfigModule\n\n\n\ncluster_PostgresConfigModule_providers\n\n\n\ncluster_PostgresConfigModule_exports\n\n\n\n\nPostgresConfigService \n\nPostgresConfigService \n\n\n\nPostgresConfigModule\n\nPostgresConfigModule\n\nPostgresConfigService  -->\n\nPostgresConfigModule->PostgresConfigService \n\n\n\n\n\nPostgresConfigService\n\nPostgresConfigService\n\nPostgresConfigModule -->\n\nPostgresConfigService->PostgresConfigModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/database/postgres/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostgresConfigService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostgresConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostgresConfigService } from './config.service';\nimport { ConfigModule } from '@nestjs/config';\nimport configuration from './configuration';\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string(),\n        POSTGRES_PORT: Joi.number(),\n        POSTGRES_USER: Joi.string(),\n        POSTGRES_PASSWORD: Joi.string(),\n        POSTGRES_DATABASE: Joi.string(),\n      }),\n    }),\n  ],\n  providers: [PostgresConfigService],\n  exports: [PostgresConfigService],\n})\nexport class PostgresConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostgresConfigService.html":{"url":"injectables/PostgresConfigService.html","title":"injectable - PostgresConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostgresConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/database/postgres/config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                prefix\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    host\n                                \n                                \n                                    port\n                                \n                                \n                                    user\n                                \n                                \n                                    password\n                                \n                                \n                                    database\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/config/database/postgres/config.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'postgres'\n                    \n                \n                    \n                        \n                                Defined in src/config/database/postgres/config.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        host\n                    \n                \n\n                \n                    \n                        gethost()\n                    \n                \n                            \n                                \n                                    Defined in src/config/database/postgres/config.service.ts:10\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        port\n                    \n                \n\n                \n                    \n                        getport()\n                    \n                \n                            \n                                \n                                    Defined in src/config/database/postgres/config.service.ts:14\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        user\n                    \n                \n\n                \n                    \n                        getuser()\n                    \n                \n                            \n                                \n                                    Defined in src/config/database/postgres/config.service.ts:18\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        password\n                    \n                \n\n                \n                    \n                        getpassword()\n                    \n                \n                            \n                                \n                                    Defined in src/config/database/postgres/config.service.ts:22\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        database\n                    \n                \n\n                \n                    \n                        getdatabase()\n                    \n                \n                            \n                                \n                                    Defined in src/config/database/postgres/config.service.ts:26\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class PostgresConfigService {\n  private prefix: string = 'postgres';\n\n  constructor(private readonly config: ConfigService) {}\n\n  get host(): string {\n    return this.config.get(`${this.prefix}.host`);\n  }\n\n  get port(): number {\n    return this.config.get(`${this.prefix}.port`);\n  }\n\n  get user(): string {\n    return this.config.get(`${this.prefix}.user`);\n  }\n\n  get password(): string {\n    return this.config.get(`${this.prefix}.password`);\n  }\n\n  get database(): string {\n    return this.config.get(`${this.prefix}.database`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostgresProviderModule.html":{"url":"modules/PostgresProviderModule.html","title":"module - PostgresProviderModule","body":"\n                   \n\n\n\n\n    Modules\n    PostgresProviderModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/provider/database/postgres/provider.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostgresConfigModule } from 'src/config/database/postgres/config.module';\nimport { PostgresConfigService } from 'src/config/database/postgres/config.service';\nimport { StatusEntity } from 'src/model/postgres/status.entity';\nimport { TaskEntity } from 'src/model/postgres/task.entity';\nimport { UserEnity } from 'src/model/postgres/user.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [PostgresConfigModule],\n      useFactory: (postgresConfigService: PostgresConfigService) => ({\n        type: 'postgres',\n        host: postgresConfigService.host,\n        port: postgresConfigService.port,\n        username: postgresConfigService.user,\n        password: postgresConfigService.password,\n        database: postgresConfigService.database,\n        synchronize: true,\n        entities: [UserEnity, StatusEntity, TaskEntity],\n      }),\n      inject: [PostgresConfigService],\n    }),\n  ],\n  exports: [TypeOrmModule],\n})\nexport class PostgresProviderModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDTO.html":{"url":"classes/RegisterDTO.html","title":"class - RegisterDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                    \n                                lastname\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/register.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'nuttapong', default: ''})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/register.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/register.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/register.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsEmail } from 'class-validator';\n\nexport class RegisterDTO {\n  @ApiProperty({ example: 'nuttapong', default: '' })\n  @IsNotEmpty()\n  firstname: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  lastname: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusController.html":{"url":"controllers/StatusController.html","title":"controller - StatusController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/status/status.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                status\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    createStatus(req, body: CreateStatusDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('/create')@UsePipes(ValidationPipe)\n                \n            \n\n                    \n                        \n                            Defined in src/module/status/status.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            CreateStatusDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Request,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/auth/jwt/jwt-auth.guard';\nimport { StatusService } from './status.service';\nimport { CreateStatusDTO } from './dto/create-status.dto';\n\n@Controller('status')\nexport class StatusController {\n  constructor(private readonly statusService: StatusService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('/create')\n  @UsePipes(ValidationPipe)\n  async createStatus(@Request() req, @Body() body: CreateStatusDTO) {\n    const status = await this.statusService.createStatus(body);\n    return status;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusEntity.html":{"url":"entities/StatusEntity.html","title":"entity - StatusEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/postgres/status.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdOn\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                label\n                            \n                            \n                                    \n                                tasks\n                            \n                            \n                                    \n                                updatedOn\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_on', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/status.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/status.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/status.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, taskEntity => taskEntity.status)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/status.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_on', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/status.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { TaskEntity } from './task.entity';\n\n@Entity({ name: 'status' })\nexport class StatusEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  label: string;\n\n  @OneToMany(() => TaskEntity, (taskEntity) => taskEntity.status)\n  tasks: TaskEntity[];\n\n  @CreateDateColumn({ name: 'created_on', type: 'timestamp' })\n  createdOn: Date;\n\n  @UpdateDateColumn({ name: 'updated_on', type: 'timestamp' })\n  updatedOn: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusModule.html":{"url":"modules/StatusModule.html","title":"module - StatusModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusModule\n\n\n\ncluster_StatusModule_providers\n\n\n\n\nStatusService\n\nStatusService\n\n\n\nStatusModule\n\nStatusModule\n\nStatusModule -->\n\nStatusService->StatusModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/status/status.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StatusService } from './status.service';\nimport { StatusController } from './status.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StatusEntity } from 'src/model/postgres/status.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([StatusEntity])],\n  providers: [StatusService],\n  controllers: [StatusController],\n})\nexport class StatusModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusService.html":{"url":"injectables/StatusService.html","title":"injectable - StatusService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/status/status.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(statusRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/module/status/status.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        statusRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    createStatus(source: CreateStatusDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/status/status.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                source\n                                            \n                                                            CreateStatusDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusEntity } from 'src/model/postgres/status.entity';\nimport { Repository } from 'typeorm';\nimport { CreateStatusDTO } from './dto/create-status.dto';\n\n@Injectable()\nexport class StatusService {\n  constructor(\n    @InjectRepository(StatusEntity)\n    private readonly statusRepo: Repository,\n  ) {}\n\n  async createStatus(source: CreateStatusDTO): Promise {\n    const status = await this.statusRepo.save({ label: source.label });\n    return status;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                assignMembersToTask\n                            \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                taskList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        assignMembersToTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignMembersToTask(body: AssignMembersTaskDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('/assign_members')\n                \n            \n\n                    \n                        \n                            Defined in src/module/task/task.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AssignMembersTaskDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(body: CreateTaskDTO, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/module/task/task.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreateTaskDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        taskList\n                        \n                    \n                \n            \n            \n                \n                        \n                    taskList(req, body: TaskListFilterDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('/list')\n                \n            \n\n                    \n                        \n                            Defined in src/module/task/task.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            TaskListFilterDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { CreateTaskDTO } from './dto/create-task.dto';\nimport { JwtAuthGuard } from 'src/auth/jwt/jwt-auth.guard';\nimport { TaskListFilterDTO } from './dto/task-list-filter.dto';\nimport { AssignMembersTaskDTO } from './dto/assign-members-task.dto';\nimport { ApiBearerAuth } from '@nestjs/swagger';\nimport { LogService } from 'src/log/log.service';\n\n@ApiBearerAuth()\n@Controller('task')\nexport class TaskController {\n  constructor(\n    private readonly taskService: TaskService,\n    private readonly logger: LogService,\n  ) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('/create')\n  create(@Body() body: CreateTaskDTO, @Request() req) {\n    return this.taskService.createTask(body, req.user.id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('/list')\n  async taskList(@Request() req, @Body() body: TaskListFilterDTO) {\n    this.logger.info(body);\n    const tasks = await this.taskService.taskList(body);\n    return tasks;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('/assign_members')\n  async assignMembersToTask(@Body() body: AssignMembersTaskDTO) {\n    const tasks = await this.taskService.assignMembersToTask(body);\n    return tasks;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TaskEntity.html":{"url":"entities/TaskEntity.html","title":"entity - TaskEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TaskEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/postgres/task.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                createdOn\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                members\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                statusId\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedOn\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEnity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, userEnity => userEnity.createdTasks)@JoinColumn({name: 'created_by'})@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/task.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_on', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/task.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/task.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/task.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEnity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, userEntity => userEntity.tasks)@JoinTable({name: 'task_user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/task.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StatusEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, statusEntity => statusEntity.tasks)@JoinColumn({name: 'status_id'})@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/task.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/task.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/task.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_on', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/task.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { StatusEntity } from './status.entity';\nimport { UserEnity } from './user.entity';\n\n@Entity({ name: 'task' })\nexport class TaskEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column({ name: 'status_id', nullable: true })\n  statusId: string;\n\n  @ManyToOne(() => StatusEntity, (statusEntity) => statusEntity.tasks)\n  @JoinColumn({ name: 'status_id' })\n  @Index()\n  status: StatusEntity;\n\n  @ManyToOne(() => UserEnity, (userEnity) => userEnity.createdTasks)\n  @JoinColumn({ name: 'created_by' })\n  @Index()\n  createdBy: UserEnity;\n\n  @ManyToMany(() => UserEnity, (userEntity) => userEntity.tasks)\n  @JoinTable({ name: 'task_user' })\n  members: UserEnity[];\n\n  @CreateDateColumn({ name: 'created_on', type: 'timestamp' })\n  createdOn: Date;\n\n  @UpdateDateColumn({ name: 'updated_on', type: 'timestamp' })\n  updatedOn: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskListFilterDTO.html":{"url":"classes/TaskListFilterDTO.html","title":"class - TaskListFilterDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskListFilterDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/task-list-filter.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                dateEnd\n                            \n                            \n                                    \n                                dateStart\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateEnd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/task-list-filter.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateStart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/task-list-filter.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/task-list-filter.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/task-list-filter.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/task/dto/task-list-filter.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsUUID, IsDate, IsString } from 'class-validator';\n\nexport class TaskListFilterDTO {\n  @IsString()\n  title: string;\n\n  @IsString()\n  description: string;\n\n  @IsUUID()\n  status: string;\n\n  @IsDate()\n  dateStart: Date;\n\n  @IsDate()\n  dateEnd: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_TaskModule_imports\n\n\n\n\nLogModule\n\nLogModule\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nLogModule->TaskModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/task/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LogModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { TaskController } from './task.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskEntity } from 'src/model/postgres/task.entity';\nimport { LogModule } from 'src/log/log.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TaskEntity]),LogModule],\n  controllers: [TaskController],\n  providers: [TaskService],\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/task.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignMembersToTask\n                            \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                taskList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/module/task/task.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignMembersToTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignMembersToTask(source: AssignMembersTaskDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/task/task.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                source\n                                            \n                                                            AssignMembersTaskDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTask(source: CreateTaskDTO, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/task/task.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                source\n                                            \n                                                            CreateTaskDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        taskList\n                        \n                    \n                \n            \n            \n                \n                        \n                    taskList(filter: TaskListFilterDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/task/task.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            TaskListFilterDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { CreateTaskDTO } from './dto/create-task.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { TaskEntity } from 'src/model/postgres/task.entity';\nimport { Repository } from 'typeorm';\nimport { StatusEntity } from 'src/model/postgres/status.entity';\nimport { UserEnity } from 'src/model/postgres/user.entity';\nimport { TaskListFilterDTO } from './dto/task-list-filter.dto';\nimport { AssignMembersTaskDTO } from './dto/assign-members-task.dto';\nimport { func } from 'joi';\nimport { MemberDTO } from './dto/member.dto';\nimport { LogService } from 'src/log/log.service';\n\n@Injectable()\nexport class TaskService {\n  constructor(\n    @InjectRepository(TaskEntity)\n    private readonly taskRepo: Repository,\n  ) {}\n\n  async createTask(source: CreateTaskDTO, userId: string): Promise {\n    const newTask: TaskEntity = new TaskEntity();\n\n    newTask.title = source.title;\n    newTask.description = source.description;\n    newTask.statusId = source.statusId;\n    newTask.createdBy = {\n      id: userId,\n    } as UserEnity;\n\n    const task = await this.taskRepo.save(newTask);\n    return task;\n  }\n\n  async taskList(filter: TaskListFilterDTO): Promise {\n    let tasks = await this.taskRepo\n      .createQueryBuilder('task')\n      .leftJoin('task.status', 's')\n      .addSelect(['s.id', 's.label'])\n      .leftJoin('task.members', 'm')\n      .addSelect(['m.id', 'm.firstname', 'm.lastname']);\n    // .getMany();\n\n    // where\n    tasks.where(`task.title like :title and task.description like :desc`, {\n      title: `%${filter.title}%`,\n      desc: `%${filter.description}%`,\n    });\n\n    if (filter.dateStart)\n      tasks.andWhere(`DATE_TRUNC('day',task.created_on) >= :start`, {\n        start: filter.dateStart,\n      });\n\n    if (filter.dateEnd)\n      tasks.andWhere(`DATE_TRUNC('day',task.created_on)  ({ id: m.id }) as UserEnity);\n\n    this.taskRepo.save(task);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/module/user/user.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { accessToken: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(body: RegisterDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: RegisterDTO})@ApiResponse({status: 400, description: 'test'})@Post('/register')@UsePipes(ValidationPipe)\n                \n            \n\n                    \n                        \n                            Defined in src/module/user/user.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            RegisterDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Request,\n  Type,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { RegisterDTO } from './dto/register.dto';\nimport { UserService } from './user.service';\nimport { LocalAuthGuard } from 'src/auth/local/local-auth.guard';\nimport {\n  ApiBearerAuth,\n  ApiHeader,\n  ApiOkResponse,\n  ApiResponse,\n} from '@nestjs/swagger';\n\n@ApiBearerAuth()\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOkResponse({ type: RegisterDTO })\n  @ApiResponse({\n    status: 400,\n    description: 'test',\n  })\n  @Post('/register')\n  @UsePipes(ValidationPipe)\n  async register(@Body() body: RegisterDTO): Promise {\n    const res = await this.userService.createUser(body);\n    return res;\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @Post('/login')\n  login(@Request() req) {\n    console.log(req.user);\n\n    const token = this.userService.generateTokenUser(req.user);\n\n    return {\n      accessToken: token,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEnity.html":{"url":"entities/UserEnity.html","title":"entity - UserEnity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEnity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/postgres/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdOn\n                            \n                            \n                                    \n                                createdTasks\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstname\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastname\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                tasks\n                            \n                            \n                                    \n                                updatedOn\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_on', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdTasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, taskEntity => taskEntity.createdBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, taskEntity => taskEntity.members)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_on', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/model/postgres/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToMany,\n  OneToMany,\n} from 'typeorm';\nimport { TaskEntity } from './task.entity';\n\n@Entity({ name: 'user' })\nexport class UserEnity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  firstname: string;\n\n  @Column()\n  lastname: string;\n\n  @Column()\n  email: string;\n\n  @Column({ select: false })\n  password: string;\n\n  @ManyToMany(() => TaskEntity, (taskEntity) => taskEntity.members)\n  tasks: TaskEntity[];\n\n  @OneToMany(() => TaskEntity, (taskEntity) => taskEntity.createdBy)\n  createdTasks: TaskEntity[];\n\n  @CreateDateColumn({ name: 'created_on', type: 'timestamp' })\n  createdOn: Date;\n\n  @UpdateDateColumn({ name: 'updated_on', type: 'timestamp' })\n  updatedOn: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEnity } from 'src/model/postgres/user.entity';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEnity]), JwtModule],\n  providers: [UserService],\n  controllers: [UserController],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                generateTokenUser\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/module/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(source: RegisterDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/user/user.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                source\n                                            \n                                                            RegisterDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateTokenUser\n                        \n                    \n                \n            \n            \n                \ngenerateTokenUser(user: UserEnity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/user/user.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEnity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/user/user.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserEnity } from 'src/model/postgres/user.entity';\nimport { Repository } from 'typeorm';\nimport { RegisterDTO } from './dto/register.dto';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEnity)\n    private readonly userRepo: Repository,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async createUser(source: RegisterDTO): Promise {\n    const hash: string = await bcrypt.hash(source.password, 10);\n\n    const user = await this.userRepo.save({\n      firstname: source.firstname,\n      lastname: source.lastname,\n      email: source.email,\n      password: hash,\n    });\n\n    return user;\n  }\n\n  async validateUser(email: string, password: string) {\n    const user = await this.userRepo.findOne({ where: { email: email } });\n\n    // const isPasswordTrue = await bcrypt.compare(password, user.password);\n    const isPasswordTrue = true;\n\n    if (isPasswordTrue) {\n      return user;\n    }\n    return null;\n  }\n\n  generateTokenUser(user: UserEnity): string {\n    let payload = {\n      sub: user.id,\n      email: user.email,\n      username: user.firstname + ' ' + user.lastname,\n    };\n    const token = this.jwtService.sign(payload, {\n      secret: 'SECRET',\n      expiresIn: '1h',\n    });\n\n    return token;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/database/mongodb/config.service.ts\n            \n            injectable\n            MongodbConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/database/postgres/config.service.ts\n            \n            injectable\n            PostgresConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/log/log.service.ts\n            \n            class\n            LogService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/model/mongodb/log.entity.ts\n            \n            entity\n            LogEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/model/postgres/status.entity.ts\n            \n            entity\n            StatusEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/model/postgres/task.entity.ts\n            \n            entity\n            TaskEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/model/postgres/user.entity.ts\n            \n            entity\n            UserEnity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/status/dto/create-status.dto.ts\n            \n            class\n            CreateStatusDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/status/status.controller.ts\n            \n            controller\n            StatusController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/status/status.service.ts\n            \n            injectable\n            StatusService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/task/dto/assign-members-task.dto.ts\n            \n            class\n            AssignMembersTaskDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/task/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/module/task/dto/member-task.dto.ts\n            \n            class\n            MemberTask\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/task/dto/member.dto.ts\n            \n            class\n            MemberDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/task/dto/task-list-filter.dto.ts\n            \n            class\n            TaskListFilterDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/module/user/dto/register.dto.ts\n            \n            class\n            RegisterDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/module/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.1.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.15\n        \n            @nestjs/typeorm : ^10.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            joi : ^17.11.0\n        \n            mongodb : ^5.9.1\n        \n            mongoose : ^8.0.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.11.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LogType   (src/.../log.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/model/mongodb/log.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        LogType\n                    \n                \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                Value : INFO\n                            \n                        \n                        \n                            \n                                 WARNING\n                            \n                        \n                        \n                            \n                                Value : WARNING\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : ERROR\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MongodbConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MongodbProviderModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostgresConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostgresProviderModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_MongodbConfigModule\n\n\n\ncluster_MongodbConfigModule_exports\n\n\n\ncluster_MongodbConfigModule_providers\n\n\n\ncluster_PostgresConfigModule\n\n\n\ncluster_PostgresConfigModule_exports\n\n\n\ncluster_PostgresConfigModule_providers\n\n\n\ncluster_StatusModule\n\n\n\ncluster_StatusModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMongodbProviderModule\n\nMongodbProviderModule\n\nAppModule -->\n\nMongodbProviderModule->AppModule\n\n\n\n\n\nPostgresProviderModule\n\nPostgresProviderModule\n\nAppModule -->\n\nPostgresProviderModule->AppModule\n\n\n\n\n\nStatusModule\n\nStatusModule\n\nAppModule -->\n\nStatusModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nLogService \n\nLogService \n\n\n\nLogModule\n\nLogModule\n\nTaskModule -->\n\nLogModule->TaskModule\n\n\n\nLogService  -->\n\nLogModule->LogService \n\n\n\n\n\nMongodbConfigService \n\nMongodbConfigService \n\n\n\nMongodbConfigModule\n\nMongodbConfigModule\n\nMongodbConfigService  -->\n\nMongodbConfigModule->MongodbConfigService \n\n\n\n\n\nMongodbConfigService\n\nMongodbConfigService\n\nMongodbConfigModule -->\n\nMongodbConfigService->MongodbConfigModule\n\n\n\n\n\nPostgresConfigService \n\nPostgresConfigService \n\n\n\nPostgresConfigModule\n\nPostgresConfigModule\n\nPostgresConfigService  -->\n\nPostgresConfigModule->PostgresConfigService \n\n\n\n\n\nPostgresConfigService\n\nPostgresConfigService\n\nPostgresConfigModule -->\n\nPostgresConfigService->PostgresConfigModule\n\n\n\n\n\nStatusService\n\nStatusService\n\nStatusModule -->\n\nStatusService->StatusModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
